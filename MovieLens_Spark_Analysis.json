{"paragraphs":[{"text":"%md\n## 1.Python libraries","user":"anonymous","dateUpdated":"2025-06-17T09:15:01+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>1.Python libraries</h2>\n"}]},"apps":[],"jobName":"paragraph_1750150690602_2023336194","id":"20250613-124701_316119759","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:01+0000","dateFinished":"2025-06-17T09:15:01+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:39294"},{"text":"%pyspark\r\nfrom pyspark.sql import SparkSession\r\nfrom pyspark.sql import functions as F\r\nfrom pyspark.sql.types import StructType, StructField, IntegerType, StringType\r\nfrom pyspark.sql.functions import col, avg, count","user":"anonymous","dateUpdated":"2025-06-17T09:15:01+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1750150690602_2023336194","id":"20250612-064340_1833401777","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:01+0000","dateFinished":"2025-06-17T09:15:01+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39295"},{"text":"%md\n### Initialize Spark session","user":"anonymous","dateUpdated":"2025-06-17T09:15:01+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Initialize Spark session</h3>\n"}]},"apps":[],"jobName":"paragraph_1750150690603_2022951445","id":"20250613-124720_2090022440","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:02+0000","dateFinished":"2025-06-17T09:15:02+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39296"},{"text":"%pyspark\r\nspark = SparkSession.builder\\\r\n    .appName(\"MovieLensAnalysis\")\\\r\n    .enableHiveSupport()\\\r\n    .config(\"spark.sql.shuffle.partitions\", 8)\\\r\n    .getOrCreate()\r\n\r\nprint(\"Spark version:\", spark.version)","user":"anonymous","dateUpdated":"2025-06-17T09:15:02+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"('Spark version:', u'2.3.0.2.6.5.0-292')\n"}]},"apps":[],"jobName":"paragraph_1750150690603_2022951445","id":"20250613-124436_1941043312","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:03+0000","dateFinished":"2025-06-17T09:15:03+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39297"},{"text":"%md\n## 2.Parse the u.user file into HDFS","user":"anonymous","dateUpdated":"2025-06-17T09:15:03+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>2.Parse the u.user file into HDFS</h2>\n"}]},"apps":[],"jobName":"paragraph_1750150690603_2022951445","id":"20250613-131906_212264064","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:03+0000","dateFinished":"2025-06-17T09:15:03+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39298"},{"text":"%sh\nhdfs dfs -mkdir -p /user/maria_dev/ml-100k/","user":"anonymous","dateUpdated":"2025-06-17T09:15:03+0000","config":{"colWidth":12,"editorMode":"ace/mode/sh","results":{},"enabled":true,"editorSetting":{"language":"sh","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1750150690603_2022951445","id":"20250613-140216_248531266","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:04+0000","dateFinished":"2025-06-17T09:15:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39299"},{"text":"%sh\nhdfs dfs -put -f /tmp/ml-100k/u.user /user/maria_dev/ml-100k/u.user\nhdfs dfs -put -f /tmp/ml-100k/u.item /user/maria_dev/ml-100k/u.item\nhdfs dfs -put -f /tmp/ml-100k/u.data /user/maria_dev/ml-100k/u.data\nhdfs dfs -ls /user/maria_dev/ml-100k/","user":"anonymous","dateUpdated":"2025-06-17T09:15:04+0000","config":{"colWidth":12,"editorMode":"ace/mode/sh","results":{},"enabled":true,"editorSetting":{"language":"sh","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Found 7 items\ndrwxr-xr-x   - zeppelin hdfs          0 2025-06-13 13:02 /user/maria_dev/ml-100k/\r\n-rw-r--r--   1 zeppelin hdfs    1979173 2025-06-17 09:15 /user/maria_dev/ml-100k/u.data\n-rw-r--r--   1 zeppelin hdfs    1979173 2025-06-13 13:14 /user/maria_dev/ml-100k/u.data\r\n-rw-r--r--   1 zeppelin hdfs     236344 2025-06-17 09:15 /user/maria_dev/ml-100k/u.item\n-rw-r--r--   1 zeppelin hdfs     236344 2025-06-13 13:14 /user/maria_dev/ml-100k/u.item\r\n-rw-r--r--   1 zeppelin hdfs      22628 2025-06-17 09:15 /user/maria_dev/ml-100k/u.user\n-rw-r--r--   1 zeppelin hdfs      22628 2025-06-13 13:14 /user/maria_dev/ml-100k/u.user\r\n"}]},"apps":[],"jobName":"paragraph_1750150690603_2022951445","id":"20250613-131541_373727213","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:04+0000","dateFinished":"2025-06-17T09:15:12+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39300"},{"text":"%md\n## 3. Load, Read, and Create Resilient Distributed Dataset (RDD) Objects.","user":"anonymous","dateUpdated":"2025-06-17T09:15:04+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>3. Load, Read, and Create Resilient Distributed Dataset (RDD) Objects.</h2>\n"}]},"apps":[],"jobName":"paragraph_1750150690603_2022951445","id":"20250613-132858_434951925","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:05+0000","dateFinished":"2025-06-17T09:15:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39301"},{"text":"%md\n### Loading from HDFS as RDD","user":"anonymous","dateUpdated":"2025-06-17T09:15:05+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Loading from HDFS as RDD</h3>\n"}]},"apps":[],"jobName":"paragraph_1750150690603_2022951445","id":"20250613-132931_1118460460","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:06+0000","dateFinished":"2025-06-17T09:15:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39302"},{"text":"%pyspark\r\nuser_rdd = sc.textFile(\"hdfs:///user/maria_dev/ml-100k/u.user\")\r\nuser_rdd.take(5)","user":"anonymous","dateUpdated":"2025-06-17T09:15:06+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[u'1|24|M|technician|85711', u'2|53|F|other|94043', u'3|23|M|writer|32067', u'4|24|M|technician|43537', u'5|33|F|other|15213']\n"}]},"apps":[],"jobName":"paragraph_1750150690603_2022951445","id":"20250613-132211_262351753","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:06+0000","dateFinished":"2025-06-17T09:15:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39303"},{"text":"%pyspark\nitem_rdd = sc.textFile(\"hdfs:///user/maria_dev/ml-100k/u.item\")\nitem_rdd.take(5)","user":"anonymous","dateUpdated":"2025-06-17T09:15:06+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[u'1|Toy Story (1995)|01-Jan-1995||http://us.imdb.com/M/title-exact?Toy%20Story%20(1995)|0|0|0|1|1|1|0|0|0|0|0|0|0|0|0|0|0|0|0', u'2|GoldenEye (1995)|01-Jan-1995||http://us.imdb.com/M/title-exact?GoldenEye%20(1995)|0|1|1|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0', u'3|Four Rooms (1995)|01-Jan-1995||http://us.imdb.com/M/title-exact?Four%20Rooms%20(1995)|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0', u'4|Get Shorty (1995)|01-Jan-1995||http://us.imdb.com/M/title-exact?Get%20Shorty%20(1995)|0|1|0|0|0|1|0|0|1|0|0|0|0|0|0|0|0|0|0', u'5|Copycat (1995)|01-Jan-1995||http://us.imdb.com/M/title-exact?Copycat%20(1995)|0|0|0|0|0|0|1|0|1|0|0|0|0|0|0|0|1|0|0']\n"}]},"apps":[],"jobName":"paragraph_1750150690603_2022951445","id":"20250613-132459_874863762","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:07+0000","dateFinished":"2025-06-17T09:15:07+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39304"},{"text":"%pyspark\ndata_rdd = sc.textFile(\"hdfs:///user/maria_dev/ml-100k/u.data\")\ndata_rdd.take(5)","user":"anonymous","dateUpdated":"2025-06-17T09:15:06+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[u'196\\t242\\t3\\t881250949', u'186\\t302\\t3\\t891717742', u'22\\t377\\t1\\t878887116', u'244\\t51\\t2\\t880606923', u'166\\t346\\t1\\t886397596']\n"}]},"apps":[],"jobName":"paragraph_1750150690603_2022951445","id":"20250613-132500_795064990","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:07+0000","dateFinished":"2025-06-17T09:15:07+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39305"},{"text":"%md\n### Parsing RDD","user":"anonymous","dateUpdated":"2025-06-17T09:15:07+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Parsing RDD</h3>\n"}]},"apps":[],"jobName":"paragraph_1750150690603_2022951445","id":"20250613-133021_1519437662","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:08+0000","dateFinished":"2025-06-17T09:15:08+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39306"},{"text":"%pyspark\nuser_parsed_rdd = user_rdd.map(lambda line: line.split('|'))\nuser_parsed_rdd.take(5)","user":"anonymous","dateUpdated":"2025-06-17T09:15:08+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[[u'1', u'24', u'M', u'technician', u'85711'], [u'2', u'53', u'F', u'other', u'94043'], [u'3', u'23', u'M', u'writer', u'32067'], [u'4', u'24', u'M', u'technician', u'43537'], [u'5', u'33', u'F', u'other', u'15213']]\n"}]},"apps":[],"jobName":"paragraph_1750150690603_2022951445","id":"20250613-132304_873596449","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:09+0000","dateFinished":"2025-06-17T09:15:09+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39307"},{"text":"%pyspark\nitem_parsed_rdd = item_rdd.map(lambda line: line.split('|'))\nitem_parsed_rdd.take(3)","user":"anonymous","dateUpdated":"2025-06-17T09:15:09+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[[u'1', u'Toy Story (1995)', u'01-Jan-1995', u'', u'http://us.imdb.com/M/title-exact?Toy%20Story%20(1995)', u'0', u'0', u'0', u'1', u'1', u'1', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0'], [u'2', u'GoldenEye (1995)', u'01-Jan-1995', u'', u'http://us.imdb.com/M/title-exact?GoldenEye%20(1995)', u'0', u'1', u'1', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'1', u'0', u'0'], [u'3', u'Four Rooms (1995)', u'01-Jan-1995', u'', u'http://us.imdb.com/M/title-exact?Four%20Rooms%20(1995)', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'1', u'0', u'0']]\n"}]},"apps":[],"jobName":"paragraph_1750150690603_2022951445","id":"20250613-132551_554682406","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:09+0000","dateFinished":"2025-06-17T09:15:09+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39308"},{"text":"%pyspark\ndata_parsed_rdd = data_rdd.map(lambda line: line.split('\\t'))\ndata_parsed_rdd.take(5)","user":"anonymous","dateUpdated":"2025-06-17T09:15:09+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[[u'196', u'242', u'3', u'881250949'], [u'186', u'302', u'3', u'891717742'], [u'22', u'377', u'1', u'878887116'], [u'244', u'51', u'2', u'880606923'], [u'166', u'346', u'1', u'886397596']]\n"}]},"apps":[],"jobName":"paragraph_1750150690604_2021027701","id":"20250613-132553_1272870490","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:10+0000","dateFinished":"2025-06-17T09:15:10+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39309"},{"text":"%md\n### Convert to a structured dictionary","user":"anonymous","dateUpdated":"2025-06-17T09:15:10+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Convert to a structured dictionary</h3>\n"}]},"apps":[],"jobName":"paragraph_1750150690604_2021027701","id":"20250613-133134_661736307","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:11+0000","dateFinished":"2025-06-17T09:15:11+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39310"},{"text":"%pyspark\nuser_dict_rdd = user_parsed_rdd.map(lambda arr: {\n    \"user_id\": int(arr[0]),\n    \"age\": int(arr[1]),\n    \"gender\": arr[2],\n    \"occupation\": arr[3],\n    \"zip_code\": arr[4]\n})\n\nuser_dict_rdd.take(5)","user":"anonymous","dateUpdated":"2025-06-17T09:15:11+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[{'gender': u'M', 'age': 24, 'occupation': u'technician', 'user_id': 1, 'zip_code': u'85711'}, {'gender': u'F', 'age': 53, 'occupation': u'other', 'user_id': 2, 'zip_code': u'94043'}, {'gender': u'M', 'age': 23, 'occupation': u'writer', 'user_id': 3, 'zip_code': u'32067'}, {'gender': u'M', 'age': 24, 'occupation': u'technician', 'user_id': 4, 'zip_code': u'43537'}, {'gender': u'F', 'age': 33, 'occupation': u'other', 'user_id': 5, 'zip_code': u'15213'}]\n"}]},"apps":[],"jobName":"paragraph_1750150690604_2021027701","id":"20250613-132344_590173069","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:11+0000","dateFinished":"2025-06-17T09:15:11+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39311"},{"text":"%pyspark\ngenres = [\n    \"unknown\", \"Action\", \"Adventure\", \"Animation\", \"Children\", \"Comedy\", \"Crime\", \"Documentary\", \"Drama\",\n    \"Fantasy\", \"Film-Noir\", \"Horror\", \"Musical\", \"Mystery\", \"Romance\", \"Sci-Fi\", \"Thriller\", \"War\", \"Western\"]\n\nitem_dict_rdd = item_parsed_rdd.map(lambda arr: {\n    \"movie_id\": int(arr[0]),\n    \"movie_title\": arr[1],\n    \"release_date\": arr[2],\n    \"video_release_date\": arr[3],\n    \"IMDb_URL\": arr[4],\n    \"genres\": [genres[i] for i in range(19) if int(arr[5+i]) == 1]\n})\n\nitem_dict_rdd.take(1)","user":"anonymous","dateUpdated":"2025-06-17T09:15:11+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[{'video_release_date': u'', 'genres': ['Animation', 'Children', 'Comedy'], 'movie_id': 1, 'release_date': u'01-Jan-1995', 'movie_title': u'Toy Story (1995)', 'IMDb_URL': u'http://us.imdb.com/M/title-exact?Toy%20Story%20(1995)'}]\n"}]},"apps":[],"jobName":"paragraph_1750150690604_2021027701","id":"20250613-133148_1272030015","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:11+0000","dateFinished":"2025-06-17T09:15:11+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39312"},{"text":"%pyspark\ndata_dict_rdd = data_parsed_rdd.map(lambda arr: {\n    \"user_id\": int(arr[0]),\n    \"movie_id\": int(arr[1]),\n    \"rating\": int(arr[2]),\n    \"timestamp\": int(arr[3])\n})\ndata_dict_rdd.take(3)","user":"anonymous","dateUpdated":"2025-06-17T09:15:11+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[{'rating': 3, 'user_id': 196, 'movie_id': 242, 'timestamp': 881250949}, {'rating': 3, 'user_id': 186, 'movie_id': 302, 'timestamp': 891717742}, {'rating': 1, 'user_id': 22, 'movie_id': 377, 'timestamp': 878887116}]\n"}]},"apps":[],"jobName":"paragraph_1750150690604_2021027701","id":"20250613-133150_547184446","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:12+0000","dateFinished":"2025-06-17T09:15:12+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39313"},{"text":"%md\n## 4. Convert the RDD objects into DataFrames.","user":"anonymous","dateUpdated":"2025-06-17T09:15:12+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1750150690604_2021027701","id":"20250613-133713_1870257154","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:12+0000","dateFinished":"2025-06-17T09:15:12+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:39314"},{"text":"%pyspark\nfrom pyspark.sql.types import StructType, StructField, IntegerType, StringType\n\nuser_schema = StructType([\n    StructField(\"user_id\", IntegerType(), True),\n    StructField(\"age\", IntegerType(), True),\n    StructField(\"gender\", StringType(), True),\n    StructField(\"occupation\", StringType(), True),\n    StructField(\"zip_code\", StringType(), True)\n])\n\nusers_df = spark.createDataFrame(user_dict_rdd, schema=user_schema)\nusers_df.show(5)","user":"anonymous","dateUpdated":"2025-06-17T09:15:12+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+---+------+----------+--------+\n|user_id|age|gender|occupation|zip_code|\n+-------+---+------+----------+--------+\n|      1| 24|     M|technician|   85711|\n|      2| 53|     F|     other|   94043|\n|      3| 23|     M|    writer|   32067|\n|      4| 24|     M|technician|   43537|\n|      5| 33|     F|     other|   15213|\n+-------+---+------+----------+--------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1750150690604_2021027701","id":"20250613-133957_419755101","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:12+0000","dateFinished":"2025-06-17T09:15:12+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39315"},{"text":"%pyspark\r\nfrom pyspark.sql.types import ArrayType, StringType, StructType, StructField, IntegerType\r\n\r\nitem_schema = StructType([\r\n    StructField(\"movie_id\", IntegerType(), True),\r\n    StructField(\"movie_title\", StringType(), True),\r\n    StructField(\"release_date\", StringType(), True),\r\n    StructField(\"video_release_date\", StringType(), True),\r\n    StructField(\"IMDb_URL\", StringType(), True),\r\n    StructField(\"genres\", ArrayType(StringType()), True)\r\n])\r\n\r\nitems_df = spark.createDataFrame(item_dict_rdd, schema=item_schema)\r\nitems_df.show(5, truncate=False)","user":"anonymous","dateUpdated":"2025-06-17T09:15:12+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+-----------------+------------+------------------+------------------------------------------------------+-----------------------------+\n|movie_id|movie_title      |release_date|video_release_date|IMDb_URL                                              |genres                       |\n+--------+-----------------+------------+------------------+------------------------------------------------------+-----------------------------+\n|1       |Toy Story (1995) |01-Jan-1995 |                  |http://us.imdb.com/M/title-exact?Toy%20Story%20(1995) |[Animation, Children, Comedy]|\n|2       |GoldenEye (1995) |01-Jan-1995 |                  |http://us.imdb.com/M/title-exact?GoldenEye%20(1995)   |[Action, Adventure, Thriller]|\n|3       |Four Rooms (1995)|01-Jan-1995 |                  |http://us.imdb.com/M/title-exact?Four%20Rooms%20(1995)|[Thriller]                   |\n|4       |Get Shorty (1995)|01-Jan-1995 |                  |http://us.imdb.com/M/title-exact?Get%20Shorty%20(1995)|[Action, Comedy, Drama]      |\n|5       |Copycat (1995)   |01-Jan-1995 |                  |http://us.imdb.com/M/title-exact?Copycat%20(1995)     |[Crime, Drama, Thriller]     |\n+--------+-----------------+------------+------------------+------------------------------------------------------+-----------------------------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1750150690604_2021027701","id":"20250613-134059_1579707385","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:13+0000","dateFinished":"2025-06-17T09:15:13+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39316"},{"text":"%pyspark\ndata_schema = StructType([\n    StructField(\"user_id\", IntegerType(), True),\n    StructField(\"movie_id\", IntegerType(), True),\n    StructField(\"rating\", IntegerType(), True),\n    StructField(\"timestamp\", IntegerType(), True)\n])\n\nratings_df = spark.createDataFrame(data_dict_rdd, schema=data_schema)\nratings_df.show(5)","user":"anonymous","dateUpdated":"2025-06-17T09:15:13+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+--------+------+---------+\n|user_id|movie_id|rating|timestamp|\n+-------+--------+------+---------+\n|    196|     242|     3|881250949|\n|    186|     302|     3|891717742|\n|     22|     377|     1|878887116|\n|    244|      51|     2|880606923|\n|    166|     346|     1|886397596|\n+-------+--------+------+---------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1750150690604_2021027701","id":"20250613-134227_1054590018","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:13+0000","dateFinished":"2025-06-17T09:15:13+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39317"},{"text":"%pyspark\nusers_df.createOrReplaceTempView(\"users\")\nitems_df.createOrReplaceTempView(\"items\")\nratings_df.createOrReplaceTempView(\"ratings\")","user":"anonymous","dateUpdated":"2025-06-17T09:15:13+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1750150690604_2021027701","id":"20250612-065017_1262819177","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:14+0000","dateFinished":"2025-06-17T09:15:14+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39318"},{"text":"%md\n## 5. Write the DataFrame into the Keyspace database","user":"anonymous","dateUpdated":"2025-06-17T09:15:13+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>5. Write the DataFrame into the Keyspace database</h2>\n"}]},"apps":[],"jobName":"paragraph_1750150690604_2021027701","id":"20250613-135233_573705905","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:14+0000","dateFinished":"2025-06-17T09:15:14+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39319"},{"text":"%pyspark\nspark.sql(\"CREATE DATABASE IF NOT EXISTS movielens\")","user":"anonymous","dateUpdated":"2025-06-17T09:15:14+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"DataFrame[]\n"}]},"apps":[],"jobName":"paragraph_1750150690604_2021027701","id":"20250613-135346_1018933957","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:15+0000","dateFinished":"2025-06-17T09:15:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39320"},{"text":"%pyspark\nusers_df.write.mode(\"overwrite\").saveAsTable(\"movielens.users\")\nitems_df.write.mode(\"overwrite\").saveAsTable(\"movielens.items\")\nratings_df.write.mode(\"overwrite\").saveAsTable(\"movielens.ratings\")","user":"anonymous","dateUpdated":"2025-06-17T09:15:15+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1750150690604_2021027701","id":"20250613-135348_556805268","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:15+0000","dateFinished":"2025-06-17T09:15:22+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39321"},{"text":"%pyspark\nspark.sql(\"SELECT * FROM movielens.users LIMIT 5\").show()","user":"anonymous","dateUpdated":"2025-06-17T09:15:15+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+---+------+----------+--------+\n|user_id|age|gender|occupation|zip_code|\n+-------+---+------+----------+--------+\n|    472| 24|     M|   student|   87544|\n|    473| 29|     M|   student|   94708|\n|    474| 51|     M| executive|   93711|\n|    475| 30|     M|programmer|   75230|\n|    476| 28|     M|   student|   60440|\n+-------+---+------+----------+--------+\n\n"}]},"apps":[],"jobName":"paragraph_1750150690604_2021027701","id":"20250613-135623_1606675823","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:16+0000","dateFinished":"2025-06-17T09:15:22+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39322"},{"text":"%md\n## 6. Read the table back into a new DataFrame.","user":"anonymous","dateUpdated":"2025-06-17T09:15:16+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>6. Read the table back into a new DataFrame.</h2>\n"}]},"apps":[],"jobName":"paragraph_1750150690605_2020642952","id":"20250613-135946_1420990454","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:16+0000","dateFinished":"2025-06-17T09:15:16+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39323"},{"text":"%pyspark\r\nusers_new_df = spark.read.table(\"movielens.users\")\r\nusers_new_df.show(5)","user":"anonymous","dateUpdated":"2025-06-17T09:15:16+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+---+------+----------+--------+\n|user_id|age|gender|occupation|zip_code|\n+-------+---+------+----------+--------+\n|    472| 24|     M|   student|   87544|\n|    473| 29|     M|   student|   94708|\n|    474| 51|     M| executive|   93711|\n|    475| 30|     M|programmer|   75230|\n|    476| 28|     M|   student|   60440|\n+-------+---+------+----------+--------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1750150690605_2020642952","id":"20250613-135839_2016386427","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:22+0000","dateFinished":"2025-06-17T09:15:22+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39324"},{"text":"%pyspark\nitems_new_df = spark.read.table(\"movielens.items\")\nitems_new_df.show(5, truncate=False)","user":"anonymous","dateUpdated":"2025-06-17T09:15:16+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+------------------------+------------+------------------+-----------------------------------------------------------------+-------------------------+\n|movie_id|movie_title             |release_date|video_release_date|IMDb_URL                                                         |genres                   |\n+--------+------------------------+------------+------------------+-----------------------------------------------------------------+-------------------------+\n|839     |Loch Ness (1995)        |01-Jan-1995 |                  |http://us.imdb.com/M/title-exact?Loch%20Ness%20(1995)            |[Horror, Thriller]       |\n|840     |Last Man Standing (1996)|20-Sep-1996 |                  |http://us.imdb.com/M/title-exact?Last%20Man%20Standing%20(1996/I)|[Action, Drama, Western] |\n|841     |Glimmer Man, The (1996) |04-Oct-1996 |                  |http://us.imdb.com/M/title-exact?Glimmer%20Man,%20The%20(1996)   |[Action, Thriller]       |\n|842     |Pollyanna (1960)        |01-Jan-1960 |                  |http://us.imdb.com/M/title-exact?Pollyanna%20(1960)              |[Children, Comedy, Drama]|\n|843     |Shaggy Dog, The (1959)  |01-Jan-1959 |                  |http://us.imdb.com/M/title-exact?Shaggy%20Dog,%20The%20(1959)    |[Children, Comedy]       |\n+--------+------------------------+------------+------------------+-----------------------------------------------------------------+-------------------------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1750150690605_2020642952","id":"20250613-135901_1734478189","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:22+0000","dateFinished":"2025-06-17T09:15:23+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39325"},{"text":"%pyspark\nratings_new_df = spark.read.table(\"movielens.ratings\")\nratings_new_df.show(5)","user":"anonymous","dateUpdated":"2025-06-17T09:15:17+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+--------+------+---------+\n|user_id|movie_id|rating|timestamp|\n+-------+--------+------+---------+\n|    196|     242|     3|881250949|\n|    186|     302|     3|891717742|\n|     22|     377|     1|878887116|\n|    244|      51|     2|880606923|\n|    166|     346|     1|886397596|\n+-------+--------+------+---------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1750150690605_2020642952","id":"20250613-135859_150813452","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:23+0000","dateFinished":"2025-06-17T09:15:23+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39326"},{"text":"%md\n## i) Calculate the Average Rating for Each Movie","user":"anonymous","dateUpdated":"2025-06-17T09:15:17+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>i) Calculate the Average Rating for Each Movie</h2>\n"}]},"apps":[],"jobName":"paragraph_1750150690605_2020642952","id":"20250613-085143_693071539","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:18+0000","dateFinished":"2025-06-17T09:15:18+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39327"},{"text":"%md\nThe main goal of this step is to compute the average rating for every movie in the MovieLens 100K dataset.\nBy doing so, I can understand which movies are generally more popular or appreciated by users, and which ones might have received a less favorable response.\nTo achieve this, I use Spark SQL to join the `ratings` and `items` tables, group the data by `movie_id` and `movie_title`, and compute:\n- The average user rating for each movie (`AVG(r.rating)`)\n- The total number of ratings each movie received (`COUNT(*)`)","user":"anonymous","dateUpdated":"2025-06-17T09:15:18+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>The main goal of this step is to compute the average rating for every movie in the MovieLens 100K dataset.\n<br  />By doing so, I can understand which movies are generally more popular or appreciated by users, and which ones might have received a less favorable response.\n<br  />To achieve this, I use Spark SQL to join the <code>ratings</code> and <code>items</code> tables, group the data by <code>movie_id</code> and <code>movie_title</code>, and compute:</p>\n<ul>\n<li>The average user rating for each movie (<code>AVG(r.rating)</code>)</li>\n<li>The total number of ratings each movie received (<code>COUNT(*)</code>)</li>\n</ul>\n"}]},"apps":[],"jobName":"paragraph_1750150690605_2020642952","id":"20250613-152225_1833066775","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:18+0000","dateFinished":"2025-06-17T09:15:18+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39328"},{"text":"%pyspark\navg_rating_with_name_df = spark.sql(\"\"\"\n    SELECT\n        i.movie_id,\n        i.movie_title,\n        AVG(r.rating) AS avg_rating,\n        COUNT(*) AS rating_count\n    FROM ratings r\n    JOIN items i ON r.movie_id = i.movie_id\n    GROUP BY i.movie_id, i.movie_title\n    ORDER BY i.movie_id\n\"\"\")\navg_rating_with_name_df.show(10, truncate=False)","user":"anonymous","dateUpdated":"2025-06-17T09:15:18+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+----------------------------------------------------+------------------+------------+\n|movie_id|movie_title                                         |avg_rating        |rating_count|\n+--------+----------------------------------------------------+------------------+------------+\n|1       |Toy Story (1995)                                    |3.8783185840707963|452         |\n|2       |GoldenEye (1995)                                    |3.2061068702290076|131         |\n|3       |Four Rooms (1995)                                   |3.033333333333333 |90          |\n|4       |Get Shorty (1995)                                   |3.550239234449761 |209         |\n|5       |Copycat (1995)                                      |3.302325581395349 |86          |\n|6       |Shanghai Triad (Yao a yao yao dao waipo qiao) (1995)|3.576923076923077 |26          |\n|7       |Twelve Monkeys (1995)                               |3.798469387755102 |392         |\n|8       |Babe (1995)                                         |3.9954337899543377|219         |\n|9       |Dead Man Walking (1995)                             |3.8963210702341136|299         |\n|10      |Richard III (1995)                                  |3.831460674157303 |89          |\n+--------+----------------------------------------------------+------------------+------------+\nonly showing top 10 rows\n\n"}]},"apps":[],"jobName":"paragraph_1750150690605_2020642952","id":"20250612-072226_1138726021","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:23+0000","dateFinished":"2025-06-17T09:15:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39329"},{"text":"%md\r\nFor each movie, I group the ratings by the movie ID and movie title. Then calculate the average rating and the total number of ratings for each movie.  \r\nThis allows me to see not only how well a movie is rated on average, but also how many users have contributed to its score.\r\n\r\nAfter running the query, I display the results in a table. This table shows the movie ID, the movie title, the average rating, and the number of ratings for each movie.  ","user":"anonymous","dateUpdated":"2025-06-17T09:15:19+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>For each movie, I group the ratings by the movie ID and movie title. Then calculate the average rating and the total number of ratings for each movie.\n<br  />This allows me to see not only how well a movie is rated on average, but also how many users have contributed to its score.</p>\n<p>After running the query, I display the results in a table. This table shows the movie ID, the movie title, the average rating, and the number of ratings for each movie.</p>\n"}]},"apps":[],"jobName":"paragraph_1750150690605_2020642952","id":"20250613-091856_1089353708","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:19+0000","dateFinished":"2025-06-17T09:15:19+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39330"},{"text":"%md\r\n#### Output Result Analysis\r\nThe table above presents the average rating and the number of ratings for each of the first 10 movies in the dataset.  \r\nSeveral insights can be drawn from these results:\r\n\r\n- **Most movies have average ratings between 3 and 4**, indicating that user opinions are generally positive.\r\n- For example, *Toy Story (1995)* has an average rating of 3.88 with 452 ratings, suggesting that it is both popular and well-liked.\r\n- Movies like *Babe (1995)* and *Dead Man Walking (1995)* also receive high average scores (above 3.9) with a substantial number of ratings.\r\n- On the other hand, movies such as *Shanghai Triad* have far fewer ratings (only 26), which means their average score may not be as reliable or representative.\r\n- The **rating_count** column is important: a high average rating with very few votes may not indicate universal appeal, while movies with both a high rating and many ratings are more robustly popular.\r\n- These statistics provide a good overview of the distribution of movie popularity and user preferences in the dataset, and they serve as a foundation for more advanced analysis such as genre trends or recommendation systems.\r\n","user":"anonymous","dateUpdated":"2025-06-17T09:15:19+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h4>Output Result Analysis</h4>\n<p>The table above presents the average rating and the number of ratings for each of the first 10 movies in the dataset.\n<br  />Several insights can be drawn from these results:</p>\n<ul>\n<li><strong>Most movies have average ratings between 3 and 4</strong>, indicating that user opinions are generally positive.</li>\n<li>For example, <em>Toy Story (1995)</em> has an average rating of 3.88 with 452 ratings, suggesting that it is both popular and well-liked.</li>\n<li>Movies like <em>Babe (1995)</em> and <em>Dead Man Walking (1995)</em> also receive high average scores (above 3.9) with a substantial number of ratings.</li>\n<li>On the other hand, movies such as <em>Shanghai Triad</em> have far fewer ratings (only 26), which means their average score may not be as reliable or representative.</li>\n<li>The <strong>rating_count</strong> column is important: a high average rating with very few votes may not indicate universal appeal, while movies with both a high rating and many ratings are more robustly popular.</li>\n<li>These statistics provide a good overview of the distribution of movie popularity and user preferences in the dataset, and they serve as a foundation for more advanced analysis such as genre trends or recommendation systems.</li>\n</ul>\n"}]},"apps":[],"jobName":"paragraph_1750150690605_2020642952","id":"20250613-152659_252384398","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:20+0000","dateFinished":"2025-06-17T09:15:20+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39331"},{"text":"%md\n## ii) Identifying the Top Ten Movies with the Highest Average Ratings","user":"anonymous","dateUpdated":"2025-06-17T09:15:20+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>ii) Identifying the Top Ten Movies with the Highest Average Ratings</h2>\n"}]},"apps":[],"jobName":"paragraph_1750150690605_2020642952","id":"20250613-082531_444800535","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:20+0000","dateFinished":"2025-06-17T09:15:20+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39332"},{"text":"%md\nIn this step, aiming to find the top ten movies with the highest average ratings.  \nI use SQL to aggregate the movie ratings data. First, join the `ratings` and `items` tables. The `ratings` table contains user ratings for each movie. The `items` table provides the movie titles and other metadata.\n\nGroup the data by `movie_id` and `movie_title`. For each group, calculating the average rating and the total number of ratings.  \nThe average rating shows how much users enjoyed a particular movie. The rating count tells me how many users contributed to this score.\n\nAfter grouping and aggregation, sort the movies in descending order by their average rating. Using the `LIMIT 10` clause to select only the top ten movies.  \nThis approach highlights the highest-rated movies in the dataset.\n\nIt is important to note that I can add an extra filter on the rating count. For example, I might only consider movies that have received at least 50 ratings.  \nThis filter helps to avoid bias from movies with very few but very high ratings. For now, Display the top ten movies based only on their average scores.\n\nThe output table presents the movie ID, the movie title, the average rating, and the number of ratings for each of the top ten movies.  ","user":"anonymous","dateUpdated":"2025-06-17T09:15:20+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>In this step, aiming to find the top ten movies with the highest average ratings.\n<br  />I use SQL to aggregate the movie ratings data. First, join the <code>ratings</code> and <code>items</code> tables. The <code>ratings</code> table contains user ratings for each movie. The <code>items</code> table provides the movie titles and other metadata.</p>\n<p>Group the data by <code>movie_id</code> and <code>movie_title</code>. For each group, calculating the average rating and the total number of ratings.\n<br  />The average rating shows how much users enjoyed a particular movie. The rating count tells me how many users contributed to this score.</p>\n<p>After grouping and aggregation, sort the movies in descending order by their average rating. Using the <code>LIMIT 10</code> clause to select only the top ten movies.\n<br  />This approach highlights the highest-rated movies in the dataset.</p>\n<p>It is important to note that I can add an extra filter on the rating count. For example, I might only consider movies that have received at least 50 ratings.\n<br  />This filter helps to avoid bias from movies with very few but very high ratings. For now, Display the top ten movies based only on their average scores.</p>\n<p>The output table presents the movie ID, the movie title, the average rating, and the number of ratings for each of the top ten movies.</p>\n"}]},"apps":[],"jobName":"paragraph_1750150690605_2020642952","id":"20250613-082640_2095750754","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:21+0000","dateFinished":"2025-06-17T09:15:21+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39333"},{"text":"%pyspark\r\ntop10_movies_df = spark.sql(\"\"\"\r\n    SELECT\r\n        i.movie_id,\r\n        i.movie_title,\r\n        AVG(r.rating) AS avg_rating,\r\n        COUNT(*) AS rating_count\r\n    FROM ratings r\r\n    JOIN items i ON r.movie_id = i.movie_id\r\n    GROUP BY i.movie_id, i.movie_title\r\n    HAVING rating_count >= 50\r\n    ORDER BY avg_rating DESC, rating_count DESC\r\n    LIMIT 10\r\n\"\"\")\r\ntop10_movies_df.show(truncate=False)","user":"anonymous","dateUpdated":"2025-06-17T09:15:21+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+------------------------------------------------------+------------------+------------+\n|movie_id|movie_title                                           |avg_rating        |rating_count|\n+--------+------------------------------------------------------+------------------+------------+\n|408     |Close Shave, A (1995)                                 |4.491071428571429 |112         |\n|318     |Schindler's List (1993)                               |4.466442953020135 |298         |\n|169     |Wrong Trousers, The (1993)                            |4.466101694915254 |118         |\n|483     |Casablanca (1942)                                     |4.45679012345679  |243         |\n|114     |Wallace & Gromit: The Best of Aardman Animation (1996)|4.447761194029851 |67          |\n|64      |Shawshank Redemption, The (1994)                      |4.445229681978798 |283         |\n|603     |Rear Window (1954)                                    |4.3875598086124405|209         |\n|12      |Usual Suspects, The (1995)                            |4.385767790262173 |267         |\n|50      |Star Wars (1977)                                      |4.3584905660377355|583         |\n|178     |12 Angry Men (1957)                                   |4.344             |125         |\n+--------+------------------------------------------------------+------------------+------------+\n\n"}]},"apps":[],"jobName":"paragraph_1750150690605_2020642952","id":"20250612-070000_1260473448","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:23+0000","dateFinished":"2025-06-17T09:15:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39334"},{"text":"%md\r\n#### Output Result Analysis\r\n\r\nThe table above lists the top ten movies with the highest average ratings, considering only movies that have received at least 50 user ratings.  \r\nThis approach ensures that the results are reliable and not skewed by movies with just a handful of votes.\r\n\r\n- All of the listed movies have average ratings above 4.3, which means they are highly appreciated by users.\r\n- Classics such as *Schindler's List (1993)*, *Rear Window (1954)*, and *Casablanca (1942)* appear among the top performers, reflecting their strong reputation and lasting appeal.\r\n- Animation and family-friendly titles like *Wallace & Gromit: The Best of Aardman Animation (1996)* and *Wrong Trousers, The (1993)* are also highly rated, suggesting that well-made animated films are well received by the user community.\r\n- *Shawshank Redemption, The (1994)* and *Star Wars (1977)* are both widely known and maintain extremely high average ratings with a large number of ratings (over 280 and 580 respectively), which demonstrates robust and broad-based popularity.\r\n- The **rating_count** column shows that all these movies have a substantial number of ratings, making the averages meaningful and reliable.","user":"anonymous","dateUpdated":"2025-06-17T09:15:21+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h4>Output Result Analysis</h4>\n<p>The table above lists the top ten movies with the highest average ratings, considering only movies that have received at least 50 user ratings.\n<br  />This approach ensures that the results are reliable and not skewed by movies with just a handful of votes.</p>\n<ul>\n<li>All of the listed movies have average ratings above 4.3, which means they are highly appreciated by users.</li>\n<li>Classics such as <em>Schindler's List (1993)</em>, <em>Rear Window (1954)</em>, and <em>Casablanca (1942)</em> appear among the top performers, reflecting their strong reputation and lasting appeal.</li>\n<li>Animation and family-friendly titles like <em>Wallace &amp; Gromit: The Best of Aardman Animation (1996)</em> and <em>Wrong Trousers, The (1993)</em> are also highly rated, suggesting that well-made animated films are well received by the user community.</li>\n<li><em>Shawshank Redemption, The (1994)</em> and <em>Star Wars (1977)</em> are both widely known and maintain extremely high average ratings with a large number of ratings (over 280 and 580 respectively), which demonstrates robust and broad-based popularity.</li>\n<li>The <strong>rating_count</strong> column shows that all these movies have a substantial number of ratings, making the averages meaningful and reliable.</li>\n</ul>\n"}]},"apps":[],"jobName":"paragraph_1750150690605_2020642952","id":"20250613-153006_1109663114","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:21+0000","dateFinished":"2025-06-17T09:15:21+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39335"},{"text":"%md\n## iii) Find the users who have rated at least 50 movies and identify their favourite movie genres","user":"anonymous","dateUpdated":"2025-06-17T09:15:21+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>iii) Find the users who have rated at least 50 movies and identify their favourite movie genres</h2>\n"}]},"apps":[],"jobName":"paragraph_1750150690606_2021797199","id":"20250613-082928_886830345","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:21+0000","dateFinished":"2025-06-17T09:15:21+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39336"},{"text":"%md\nThis analysis focuses on users who have demonstrated a high level of activity by rating at least 50 movies.  \nThe results are shown in several steps:\n\n- First, I identified the most active users by grouping ratings by user ID and counting the number of movies each user rated. Only users with at least 50 ratings were included in the next step.\n- Then, I counted, for each active user, how many movies they rated in each of the 19 available genres. This produced a wide table, where each row corresponds to a user and each column (after user ID) gives the count of ratings for one genre.\n- Finally, I determined each user's favourite genre by finding which genre they had rated the most movies in. If a user had a tie for most-rated genres, all such genres were shown.","user":"anonymous","dateUpdated":"2025-06-17T09:15:21+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>This analysis focuses on users who have demonstrated a high level of activity by rating at least 50 movies.\n<br  />The results are shown in several steps:</p>\n<ul>\n<li>First, I identified the most active users by grouping ratings by user ID and counting the number of movies each user rated. Only users with at least 50 ratings were included in the next step.</li>\n<li>Then, I counted, for each active user, how many movies they rated in each of the 19 available genres. This produced a wide table, where each row corresponds to a user and each column (after user ID) gives the count of ratings for one genre.</li>\n<li>Finally, I determined each user's favourite genre by finding which genre they had rated the most movies in. If a user had a tie for most-rated genres, all such genres were shown.</li>\n</ul>\n"}]},"apps":[],"jobName":"paragraph_1750150690606_2021797199","id":"20250613-153629_644938160","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:22+0000","dateFinished":"2025-06-17T09:15:22+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39337"},{"text":"%md\n### Find users with ≥50 ratings","user":"anonymous","dateUpdated":"2025-06-17T09:15:22+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Find users with ≥50 ratings</h3>\n"}]},"apps":[],"jobName":"paragraph_1750150690606_2021797199","id":"20250613-083056_566727652","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:22+0000","dateFinished":"2025-06-17T09:15:22+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39338"},{"text":"%pyspark\nactive_users_df = spark.sql(\"\"\"\n    SELECT\n        user_id,\n        COUNT(*) AS num_rated_movies\n    FROM ratings\n    GROUP BY user_id\n    HAVING num_rated_movies >= 50\n\"\"\")\nactive_users_df.createOrReplaceTempView(\"active_users\")\nactive_users_df.show(10)","user":"anonymous","dateUpdated":"2025-06-17T09:15:22+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+----------------+\n|user_id|num_rated_movies|\n+-------+----------------+\n|    186|              92|\n|    299|             280|\n|     38|             121|\n|    157|              51|\n|     13|             636|\n|    198|             181|\n|     18|             277|\n|    232|              93|\n|    161|              58|\n|    148|              65|\n+-------+----------------+\nonly showing top 10 rows\n\n"}]},"apps":[],"jobName":"paragraph_1750150690606_2021797199","id":"20250612-072348_2002490208","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:24+0000","dateFinished":"2025-06-17T09:15:26+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39339"},{"text":"%md\n### The number of movie ratings per genre by each active user","user":"anonymous","dateUpdated":"2025-06-17T09:15:22+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>The number of movie ratings per genre by each active user</h3>\n"}]},"apps":[],"jobName":"paragraph_1750150690606_2021797199","id":"20250613-083307_411956839","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:24+0000","dateFinished":"2025-06-17T09:15:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39340"},{"text":"%pyspark\r\n\r\ngenres = [\r\n    \"unknown\", \"Action\", \"Adventure\", \"Animation\", \"Children\", \"Comedy\", \"Crime\",\r\n    \"Documentary\", \"Drama\", \"Fantasy\", \"Film-Noir\", \"Horror\", \"Musical\", \"Mystery\",\r\n    \"Romance\", \"Sci-Fi\", \"Thriller\", \"War\", \"Western\"\r\n]\r\n\r\ngenre_sum_expr = ',\\n    '.join([\r\n    \"SUM(CAST(array_contains(i.genres, '{0}') AS INT)) AS `{0}`\".format(genre)\r\n    for genre in genres\r\n])\r\n\r\nsql_query = \"\"\"\r\nSELECT\r\n    r.user_id,\r\n    {genre_sum}\r\nFROM ratings r\r\nJOIN items i ON r.movie_id = i.movie_id\r\nJOIN active_users u ON r.user_id = u.user_id\r\nGROUP BY r.user_id\r\n\"\"\".format(genre_sum=genre_sum_expr)\r\n\r\nuser_genre_count_df = spark.sql(sql_query)\r\nuser_genre_count_df.createOrReplaceTempView(\"user_genre_count\")\r\nuser_genre_count_df.show(10)","user":"anonymous","dateUpdated":"2025-06-17T09:15:25+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+-------+------+---------+---------+--------+------+-----+-----------+-----+-------+---------+------+-------+-------+-------+------+--------+---+-------+\n|user_id|unknown|Action|Adventure|Animation|Children|Comedy|Crime|Documentary|Drama|Fantasy|Film-Noir|Horror|Musical|Mystery|Romance|Sci-Fi|Thriller|War|Western|\n+-------+-------+------+---------+---------+--------+------+-----+-----------+-----+-------+---------+------+-------+-------+-------+------+--------+---+-------+\n|     12|      0|    14|        7|        1|       3|    13|    2|          0|   24|      0|        0|     1|      3|      3|     13|     7|      12|  7|      2|\n|     13|      0|   156|       73|       16|      52|   188|   45|         13|  218|     12|       14|    75|     31|     33|    105|    65|     121| 41|     13|\n|     14|      0|    18|       14|        6|       6|    35|    6|          2|   39|      1|        3|     1|      5|      6|     21|    13|      13| 10|      1|\n|     18|      0|    25|       18|       12|      19|   102|   12|          4|  141|      4|        4|     5|     24|      9|     68|    15|      23| 27|      4|\n|     38|      0|    32|       23|       10|      30|    43|    2|          0|   24|      3|        1|    18|     12|      3|     18|    15|      24|  7|      1|\n|     70|      0|    48|       37|       22|      34|    42|    5|          2|   28|      6|        1|     7|     21|      4|     20|    34|      21| 11|      0|\n|    148|      0|    12|       15|       14|      15|    20|    3|          0|   25|      0|        1|     2|     11|      2|      9|    13|       5| 10|      1|\n|    157|      0|    18|        5|        1|       1|    18|    5|          0|   21|      0|        0|     0|      1|      1|     13|     5|      12|  4|      0|\n|    161|      0|    13|        7|        1|       4|    18|    6|          1|   31|      0|        1|     0|      3|      3|     17|     5|       7|  8|      2|\n|    186|      0|    30|       13|        5|      10|    13|   13|          0|   25|      2|        3|     2|      4|     10|      7|     7|      51|  2|      3|\n+-------+-------+------+---------+---------+--------+------+-----+-----------+-----+-------+---------+------+-------+-------+-------+------+--------+---+-------+\nonly showing top 10 rows\n\n"}]},"apps":[],"jobName":"paragraph_1750151381823_1877532209","id":"20250617-090941_1940589587","dateCreated":"2025-06-17T09:09:41+0000","dateStarted":"2025-06-17T09:15:25+0000","dateFinished":"2025-06-17T09:15:32+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39341"},{"text":"%md\n### Find out each user's favorite movie genre","user":"anonymous","dateUpdated":"2025-06-17T09:15:24+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Find out each user's favorite movie genre</h3>\n"}]},"apps":[],"jobName":"paragraph_1750150690606_2021797199","id":"20250613-084218_47370255","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:26+0000","dateFinished":"2025-06-17T09:15:26+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39342"},{"text":"%pyspark\nfrom pyspark.sql.types import StringType, IntegerType\nfrom pyspark.sql.functions import udf","user":"anonymous","dateUpdated":"2025-06-17T09:15:26+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1750150690606_2021797199","id":"20250613-084216_2030438176","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:26+0000","dateFinished":"2025-06-17T09:15:32+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39343"},{"text":"%pyspark\ngenres=[\n    \"unknown\", \"Action\", \"Adventure\", \"Animation\", \"Children\", \"Comedy\",\n    \"Crime\", \"Documentary\", \"Drama\", \"Fantasy\", \"Film-Noir\", \"Horror\",\n    \"Musical\", \"Mystery\", \"Romance\", \"Sci-Fi\", \"Thriller\", \"War\", \"Western\"]","user":"anonymous","dateUpdated":"2025-06-17T09:15:26+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1750150690606_2021797199","id":"20250613-095323_1283386113","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:32+0000","dateFinished":"2025-06-17T09:15:32+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39344"},{"text":"%pyspark\ndef fav_genre_and_count(*cols):\n    # cols: 19 types of ratings\n    counts = list(cols)\n    max_count = max(counts)\n    favs = [genres[i] for i, v in enumerate(counts) if v == max_count]\n    return \",\".join(favs)\n\nfav_genre_udf = udf(fav_genre_and_count, StringType())","user":"anonymous","dateUpdated":"2025-06-17T09:15:26+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1750150690606_2021797199","id":"20250613-095322_324432405","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:32+0000","dateFinished":"2025-06-17T09:15:32+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39345"},{"text":"%pyspark\n# Pass the 19 fields into the udf one by one\nuser_genre_count_df = user_genre_count_df.withColumn(\n    \"fav_genre\",\n    fav_genre_udf(*[user_genre_count_df[g] for g in genres]))","user":"anonymous","dateUpdated":"2025-06-17T09:15:26+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1750150690606_2021797199","id":"20250613-095351_2126178325","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:33+0000","dateFinished":"2025-06-17T09:15:33+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39346"},{"text":"%pyspark\n# output max_count\ndef max_count_only(*cols):\n    return int(max(list(cols)))\nmax_count_udf = udf(max_count_only, IntegerType())\nuser_genre_count_df = user_genre_count_df.withColumn(\n    \"max_count\",\n    max_count_udf(*[user_genre_count_df[g] for g in genres]))","user":"anonymous","dateUpdated":"2025-06-17T09:15:26+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1750150690606_2021797199","id":"20250613-095350_1617619455","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:33+0000","dateFinished":"2025-06-17T09:15:33+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39347"},{"text":"%pyspark\n# Display results\nuser_genre_count_df.select(\"user_id\", \"fav_genre\", \"max_count\").show(10, truncate=False)","user":"anonymous","dateUpdated":"2025-06-17T09:15:27+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+---------+---------+\n|user_id|fav_genre|max_count|\n+-------+---------+---------+\n|12     |Drama    |24       |\n|13     |Drama    |218      |\n|14     |Drama    |39       |\n|18     |Drama    |141      |\n|38     |Comedy   |43       |\n|70     |Action   |48       |\n|148    |Drama    |25       |\n|157    |Drama    |21       |\n|161    |Drama    |31       |\n|186    |Thriller |51       |\n+-------+---------+---------+\nonly showing top 10 rows\n\n"}]},"apps":[],"jobName":"paragraph_1750150690606_2021797199","id":"20250613-095350_1125476091","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:34+0000","dateFinished":"2025-06-17T09:15:36+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39348"},{"text":"%md\r\n#### Output Result Analysis\r\n\r\n- Most active users tend to have a clear favourite genre, as seen by the \"fav_genre\" column in the last table.\r\n- For example, user 148 rated 65 movies in total, and their most rated genre is \"Drama\" with 25 ratings. Similarly, users 463, 496, and 833 also have \"Drama\" as their favourite genre.\r\n- The most popular genre among the top active users is \"Drama\", but there are also cases where \"Action\" is the favourite.\r\n- The \"max_count\" column quantifies just how focused a user is on their favourite genre. For example, user 85 has rated 288 movies in total, and 152 of these were dramas, indicating a strong personal preference.\r\n- This information provides insight into user preferences, and can be useful for personalized recommendations, marketing strategies, or understanding trends within the user community.","user":"anonymous","dateUpdated":"2025-06-17T09:15:27+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h4>Output Result Analysis</h4>\n<ul>\n<li>Most active users tend to have a clear favourite genre, as seen by the &ldquo;fav_genre&rdquo; column in the last table.</li>\n<li>For example, user 148 rated 65 movies in total, and their most rated genre is &ldquo;Drama&rdquo; with 25 ratings. Similarly, users 463, 496, and 833 also have &ldquo;Drama&rdquo; as their favourite genre.</li>\n<li>The most popular genre among the top active users is &ldquo;Drama&rdquo;, but there are also cases where &ldquo;Action&rdquo; is the favourite.</li>\n<li>The &ldquo;max_count&rdquo; column quantifies just how focused a user is on their favourite genre. For example, user 85 has rated 288 movies in total, and 152 of these were dramas, indicating a strong personal preference.</li>\n<li>This information provides insight into user preferences, and can be useful for personalized recommendations, marketing strategies, or understanding trends within the user community.</li>\n</ul>\n"}]},"apps":[],"jobName":"paragraph_1750150690607_2021412450","id":"20250613-153524_1331835938","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:27+0000","dateFinished":"2025-06-17T09:15:27+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39349"},{"text":"%md\n## iv) Find all the users who are less than 20 years old","user":"anonymous","dateUpdated":"2025-06-17T09:15:27+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>iv) Find all the users who are less than 20 years old</h2>\n"}]},"apps":[],"jobName":"paragraph_1750150690607_2021412450","id":"20250613-085440_1282254917","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:27+0000","dateFinished":"2025-06-17T09:15:27+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39350"},{"text":"%md\r\nIn this part of the analysis, I focus on identifying the youngest users in the MovieLens 100k dataset.  \r\nAge is an important demographic factor that can influence movie preferences and behavior on the platform.  \r\nBy selecting all users who are less than 20 years old, I can better understand the composition and characteristics of the teenage user group.\r\n\r\nThis information provides a basis for further exploration, such as comparing the preferences of younger users to those of older ones, or designing age-specific recommendation systems.  \r\nBelow, I use SQL queries in Spark to extract and summarize the relevant data for this age group.","user":"anonymous","dateUpdated":"2025-06-17T09:15:27+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>In this part of the analysis, I focus on identifying the youngest users in the MovieLens 100k dataset.\n<br  />Age is an important demographic factor that can influence movie preferences and behavior on the platform.\n<br  />By selecting all users who are less than 20 years old, I can better understand the composition and characteristics of the teenage user group.</p>\n<p>This information provides a basis for further exploration, such as comparing the preferences of younger users to those of older ones, or designing age-specific recommendation systems.\n<br  />Below, I use SQL queries in Spark to extract and summarize the relevant data for this age group.</p>\n"}]},"apps":[],"jobName":"paragraph_1750150690607_2021412450","id":"20250613-154213_62509489","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:27+0000","dateFinished":"2025-06-17T09:15:27+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39351"},{"text":"%md\n### Use SQL to query all users under 20 years old","user":"anonymous","dateUpdated":"2025-06-17T09:15:27+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Use SQL to query all users under 20 years old</h3>\n"}]},"apps":[],"jobName":"paragraph_1750150690607_2021412450","id":"20250613-085504_1421297462","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:28+0000","dateFinished":"2025-06-17T09:15:28+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39352"},{"text":"%pyspark\nusers_under_20_df = spark.sql(\"\"\"\n    SELECT *\n    FROM users\n    WHERE age < 20\n\"\"\")\nusers_under_20_df.show(10, truncate=False)","user":"anonymous","dateUpdated":"2025-06-17T09:15:28+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+---+------+-------------+--------+\n|user_id|age|gender|occupation   |zip_code|\n+-------+---+------+-------------+--------+\n|30     |7  |M     |student      |55436   |\n|36     |19 |F     |student      |93117   |\n|52     |18 |F     |student      |55105   |\n|57     |16 |M     |none         |84010   |\n|67     |17 |M     |student      |60402   |\n|68     |19 |M     |student      |22904   |\n|101    |15 |M     |student      |05146   |\n|110    |19 |M     |student      |77840   |\n|142    |13 |M     |other        |48118   |\n|179    |15 |M     |entertainment|20755   |\n+-------+---+------+-------------+--------+\nonly showing top 10 rows\n\n"}]},"apps":[],"jobName":"paragraph_1750150690607_2021412450","id":"20250613-084807_1548087083","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:34+0000","dateFinished":"2025-06-17T09:15:36+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39353"},{"text":"%md\n### Statistics on gender and occupation distribution of users under 20 years old","user":"anonymous","dateUpdated":"2025-06-17T09:15:28+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Statistics on gender and occupation distribution of users under 20 years old</h3>\n"}]},"apps":[],"jobName":"paragraph_1750150690607_2021412450","id":"20250613-084807_1518406468","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:29+0000","dateFinished":"2025-06-17T09:15:29+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39354"},{"text":"%pyspark\nspark.sql(\"\"\"\n    SELECT gender, occupation, COUNT(*) AS cnt\n    FROM users\n    WHERE age < 20\n    GROUP BY gender, occupation\n    ORDER BY cnt DESC\n\"\"\").show(truncate=False)","user":"anonymous","dateUpdated":"2025-06-17T09:15:29+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------+-------------+---+\n|gender|occupation   |cnt|\n+------+-------------+---+\n|M     |student      |37 |\n|F     |student      |27 |\n|M     |other        |3  |\n|M     |none         |3  |\n|M     |entertainment|2  |\n|F     |writer       |2  |\n|F     |artist       |1  |\n|F     |salesman     |1  |\n|F     |other        |1  |\n+------+-------------+---+\n\n"}]},"apps":[],"jobName":"paragraph_1750150690607_2021412450","id":"20250613-090011_80113021","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:36+0000","dateFinished":"2025-06-17T09:15:36+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39355"},{"text":"%md\r\n#### Output Result Analysis\r\n\r\nIn this step, I selected all users whose age is less than 20 years old from the user dataset.  \r\nThe resulting table lists basic demographic information for each user, including user ID, age, gender, occupation, and zip code.\r\n\r\n- The data show that most users under 20 are students, which matches expectations for this age group.\r\n- There is a mix of male and female users, and both are well represented among the student population.\r\n- A few users report occupations other than student, such as \"entertainment,\" \"writer,\" \"artist,\" or \"salesman.\" There are also cases where the occupation is missing (\"none\"), which might indicate incomplete user profiles.\r\n- The age distribution in the sample covers teenagers (as young as 13) up to young adults just under 20.\r\n- The results provide insight into the makeup of the youngest segment of MovieLens users, who may have different movie preferences and viewing habits compared to older users.\r\n\r\nThe aggregated statistics further show that the most common group is male students (37 users), followed by female students (27 users).  \r\nThere are only a few users in other occupational categories. This highlights that the majority of very young users in this dataset are still in school.","user":"anonymous","dateUpdated":"2025-06-17T09:15:29+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h4>Output Result Analysis</h4>\n<p>In this step, I selected all users whose age is less than 20 years old from the user dataset.\n<br  />The resulting table lists basic demographic information for each user, including user ID, age, gender, occupation, and zip code.</p>\n<ul>\n<li>The data show that most users under 20 are students, which matches expectations for this age group.</li>\n<li>There is a mix of male and female users, and both are well represented among the student population.</li>\n<li>A few users report occupations other than student, such as &ldquo;entertainment,&rdquo; &ldquo;writer,&rdquo; &ldquo;artist,&rdquo; or &ldquo;salesman.&rdquo; There are also cases where the occupation is missing (&ldquo;none&rdquo;), which might indicate incomplete user profiles.</li>\n<li>The age distribution in the sample covers teenagers (as young as 13) up to young adults just under 20.</li>\n<li>The results provide insight into the makeup of the youngest segment of MovieLens users, who may have different movie preferences and viewing habits compared to older users.</li>\n</ul>\n<p>The aggregated statistics further show that the most common group is male students (37 users), followed by female students (27 users).\n<br  />There are only a few users in other occupational categories. This highlights that the majority of very young users in this dataset are still in school.</p>\n"}]},"apps":[],"jobName":"paragraph_1750150690607_2021412450","id":"20250613-153940_81541615","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:30+0000","dateFinished":"2025-06-17T09:15:30+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39356"},{"text":"%md\n## v) Find all the users whose occupation is “scientist” and whose age is between 30 and 40 years old.","user":"anonymous","dateUpdated":"2025-06-17T09:15:30+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>v) Find all the users whose occupation is “scientist” and whose age is between 30 and 40 years old.</h2>\n"}]},"apps":[],"jobName":"paragraph_1750150690607_2021412450","id":"20250613-085926_1600760694","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:31+0000","dateFinished":"2025-06-17T09:15:31+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39357"},{"text":"%md\r\nIn this step, I focus on filtering the user data to find a specific subgroup.  \r\nMy goal is to select all users whose occupation is listed as \"scientist\" and whose age falls between 30 and 40 years old.  \r\nTo accomplish this, I use an SQL query on the `users` table.  \r\nThis approach enables me to precisely identify users who meet both conditions, which is valuable for targeted demographic analysis or downstream recommendation tasks.\r\n\r\nAfter running the SQL query, I review the filtered results and count how many users match these criteria.  ","user":"anonymous","dateUpdated":"2025-06-17T09:15:31+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>In this step, I focus on filtering the user data to find a specific subgroup.\n<br  />My goal is to select all users whose occupation is listed as &ldquo;scientist&rdquo; and whose age falls between 30 and 40 years old.\n<br  />To accomplish this, I use an SQL query on the <code>users</code> table.\n<br  />This approach enables me to precisely identify users who meet both conditions, which is valuable for targeted demographic analysis or downstream recommendation tasks.</p>\n<p>After running the SQL query, I review the filtered results and count how many users match these criteria.</p>\n"}]},"apps":[],"jobName":"paragraph_1750150690607_2021412450","id":"20250613-154710_1635095660","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:32+0000","dateFinished":"2025-06-17T09:15:32+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39358"},{"text":"%md\n### Use SQL to filter","user":"anonymous","dateUpdated":"2025-06-17T09:15:32+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Use SQL to filter</h3>\n"}]},"apps":[],"jobName":"paragraph_1750150690607_2021412450","id":"20250613-091028_1296579157","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:33+0000","dateFinished":"2025-06-17T09:15:33+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39359"},{"text":"%pyspark\nscientists_30_40_df = spark.sql(\"\"\"\n    SELECT *\n    FROM users\n    WHERE occupation = 'scientist' AND age BETWEEN 30 AND 40\n\"\"\")\nscientists_30_40_df.show(10, truncate=False)","user":"anonymous","dateUpdated":"2025-06-17T09:15:33+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+---+------+----------+--------+\n|user_id|age|gender|occupation|zip_code|\n+-------+---+------+----------+--------+\n|40     |38 |M     |scientist |27514   |\n|71     |39 |M     |scientist |98034   |\n|74     |39 |M     |scientist |T8H1N   |\n|107    |39 |M     |scientist |60466   |\n|183    |33 |M     |scientist |27708   |\n|272    |33 |M     |scientist |53706   |\n|309    |40 |M     |scientist |70802   |\n|337    |37 |M     |scientist |10522   |\n|430    |38 |M     |scientist |98199   |\n|538    |31 |M     |scientist |21010   |\n+-------+---+------+----------+--------+\nonly showing top 10 rows\n\n"}]},"apps":[],"jobName":"paragraph_1750150690607_2021412450","id":"20250613-085813_1845223215","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:36+0000","dateFinished":"2025-06-17T09:15:36+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39360"},{"text":"%md\n### Count","user":"anonymous","dateUpdated":"2025-06-17T09:15:35+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Count</h3>\n"}]},"apps":[],"jobName":"paragraph_1750150690607_2021412450","id":"20250613-091249_282510396","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:35+0000","dateFinished":"2025-06-17T09:15:35+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39361"},{"text":"%pyspark\ncount = scientists_30_40_df.count()\nprint(\"Number of scientists aged 30 to 40: \" + str(count))","user":"anonymous","dateUpdated":"2025-06-17T09:15:35+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Number of scientists aged 30 to 40: 16\n"}]},"apps":[],"jobName":"paragraph_1750150690608_2031800670","id":"20250613-084805_1489898422","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:37+0000","dateFinished":"2025-06-17T09:15:37+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39362"},{"text":"%md\nThe results show that there are **16 users** who satisfy both conditions.  \nThese users have user IDs such as 40, 74, 71, 107, 183, and others.  \nAll of them are male, as indicated by the gender column.  \nTheir zip codes are distributed across different regions, suggesting a certain level of geographic diversity even within this small professional and age-specific group.","user":"anonymous","dateUpdated":"2025-06-17T09:15:35+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>The results show that there are <strong>16 users</strong> who satisfy both conditions.\n<br  />These users have user IDs such as 40, 74, 71, 107, 183, and others.\n<br  />All of them are male, as indicated by the gender column.\n<br  />Their zip codes are distributed across different regions, suggesting a certain level of geographic diversity even within this small professional and age-specific group.</p>\n"}]},"apps":[],"jobName":"paragraph_1750150690608_2031800670","id":"20250613-154454_1844458339","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:37+0000","dateFinished":"2025-06-17T09:15:37+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39363"},{"text":"%md\r\n## Insights and Explanations\r\n\r\nThis section provides a detailed summary of the main findings and analytical reasoning throughout the MovieLens 100k dataset exploration. Each analysis step yields important insights about user behavior and movie characteristics.\r\n\r\n---\r\n\r\n### 1. Calculating the Average Rating for Each Movie\r\n\r\nBy aggregating ratings across all users, I calculated the average rating and the total number of ratings for each movie.  \r\nThis process gives a clear picture of which movies are consistently favored or disfavored by the user base.  \r\nMovies with a high number of ratings and a stable average rating are likely to have broad appeal or cultural significance.  \r\nConversely, movies with fewer ratings may represent niche interests or less popular genres.\r\n\r\n---\r\n\r\n### 2. Identifying the Top Ten Movies with the Highest Average Ratings\r\n\r\nFocusing on movies with at least 50 ratings, I identified the top ten movies with the highest average scores.  \r\nThis threshold ensures the rankings are not biased by a small number of extreme ratings.  \r\nMost top-ranked movies are either highly acclaimed classics or widely recognized by audiences.  \r\nThis finding demonstrates that collective user ratings can reliably highlight high-quality or iconic films.\r\n\r\n---\r\n\r\n### 3. Active Users and Their Favourite Genres\r\n\r\nI filtered users who have rated at least 50 movies, labeling them as active or highly engaged users.  \r\nFor each of these users, I counted the number of ratings they gave in each genre, and then determined their most frequently rated (favourite) genre.\r\n\r\nInsights include:\r\n- Many active users consistently favor a specific genre, such as \"Drama\" or \"Action\".\r\n- Some users have diverse interests, but still show a clear genre preference.\r\n- The distribution of favorite genres among active users reflects overall audience tastes and possible trends in movie popularity.\r\n\r\n---\r\n\r\n### 4. Users Less Than 20 Years Old\r\n\r\nBy selecting users under the age of 20, I explored the demographic composition and behaviors of the youngest segment of the dataset.  \r\nMost of these young users are students, with a relatively balanced distribution of genders.  \r\nUnderstanding the preferences and activities of this age group can help with targeted recommendations or youth-focused analyses.\r\n\r\n---\r\n\r\n### 5. Users Who Are Scientists Aged 30-40\r\n\r\nI applied a combined filter on both occupation and age to identify all users listed as \"scientist\" and aged between 30 and 40.  \r\nThis targeted filtering uncovers a specific professional demographic within the user base.  \r\nAlthough only a small number of users meet these criteria, such focused subgroup analyses can be valuable for custom marketing strategies or understanding niche user groups.\r\n\r\n---\r\n\r\n### General Observations\r\n\r\n- The MovieLens dataset contains a diverse set of users with varied demographic backgrounds and movie preferences.\r\n- SQL and Spark operations enable powerful filtering and aggregation, making it possible to answer both broad and highly specific analytical questions.\r\n- By combining multiple filters (such as age, occupation, and activity level), I can perform in-depth segmentation to support recommendations, marketing, or sociological research.\r\n- Overall, data-driven exploration of movie ratings and user information reveals patterns in collective opinion, individual tastes, and demographic behaviors.\r\n\r\n","user":"anonymous","dateUpdated":"2025-06-17T09:15:37+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>Insights and Explanations</h2>\n<p>This section provides a detailed summary of the main findings and analytical reasoning throughout the MovieLens 100k dataset exploration. Each analysis step yields important insights about user behavior and movie characteristics.</p>\n<hr />\n<h3>1. Calculating the Average Rating for Each Movie</h3>\n<p>By aggregating ratings across all users, I calculated the average rating and the total number of ratings for each movie.\n<br  />This process gives a clear picture of which movies are consistently favored or disfavored by the user base.\n<br  />Movies with a high number of ratings and a stable average rating are likely to have broad appeal or cultural significance.\n<br  />Conversely, movies with fewer ratings may represent niche interests or less popular genres.</p>\n<hr />\n<h3>2. Identifying the Top Ten Movies with the Highest Average Ratings</h3>\n<p>Focusing on movies with at least 50 ratings, I identified the top ten movies with the highest average scores.\n<br  />This threshold ensures the rankings are not biased by a small number of extreme ratings.\n<br  />Most top-ranked movies are either highly acclaimed classics or widely recognized by audiences.\n<br  />This finding demonstrates that collective user ratings can reliably highlight high-quality or iconic films.</p>\n<hr />\n<h3>3. Active Users and Their Favourite Genres</h3>\n<p>I filtered users who have rated at least 50 movies, labeling them as active or highly engaged users.\n<br  />For each of these users, I counted the number of ratings they gave in each genre, and then determined their most frequently rated (favourite) genre.</p>\n<p>Insights include:</p>\n<ul>\n<li>Many active users consistently favor a specific genre, such as &ldquo;Drama&rdquo; or &ldquo;Action&rdquo;.</li>\n<li>Some users have diverse interests, but still show a clear genre preference.</li>\n<li>The distribution of favorite genres among active users reflects overall audience tastes and possible trends in movie popularity.</li>\n</ul>\n<hr />\n<h3>4. Users Less Than 20 Years Old</h3>\n<p>By selecting users under the age of 20, I explored the demographic composition and behaviors of the youngest segment of the dataset.\n<br  />Most of these young users are students, with a relatively balanced distribution of genders.\n<br  />Understanding the preferences and activities of this age group can help with targeted recommendations or youth-focused analyses.</p>\n<hr />\n<h3>5. Users Who Are Scientists Aged 30-40</h3>\n<p>I applied a combined filter on both occupation and age to identify all users listed as &ldquo;scientist&rdquo; and aged between 30 and 40.\n<br  />This targeted filtering uncovers a specific professional demographic within the user base.\n<br  />Although only a small number of users meet these criteria, such focused subgroup analyses can be valuable for custom marketing strategies or understanding niche user groups.</p>\n<hr />\n<h3>General Observations</h3>\n<ul>\n<li>The MovieLens dataset contains a diverse set of users with varied demographic backgrounds and movie preferences.</li>\n<li>SQL and Spark operations enable powerful filtering and aggregation, making it possible to answer both broad and highly specific analytical questions.</li>\n<li>By combining multiple filters (such as age, occupation, and activity level), I can perform in-depth segmentation to support recommendations, marketing, or sociological research.</li>\n<li>Overall, data-driven exploration of movie ratings and user information reveals patterns in collective opinion, individual tastes, and demographic behaviors.</li>\n</ul>\n"}]},"apps":[],"jobName":"paragraph_1750150690609_2031415921","id":"20250613-155408_834050747","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:37+0000","dateFinished":"2025-06-17T09:15:37+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39364"},{"text":"%md\n## Recommendations\n\nBased on the analysis of the MovieLens 100k dataset and the key insights obtained from each step, I propose the following recommendations for future work, platform design, and research directions:\n\n---\n\n### 1. Improve Recommendation Systems with Popularity and Stability\n\nSince movies with a high number of ratings and a stable average score generally reflect broad audience appeal, I recommend giving these movies more weight in collaborative filtering and popularity-based recommendation algorithms.  \nAdditionally, highlighting consistently popular movies can increase user satisfaction, especially for new or undecided users.\n\n---\n\n### 2. Adjust Genre Recommendations According to User Activity\n\nThe analysis shows that highly active users tend to have clear genre preferences.  \nI recommend personalizing genre-based recommendations for these users, prioritizing their most frequently rated genres.  \nFor less active users, a diverse mix of genres may help them discover their specific interests.\n\n---\n\n### 3. Create Demographic-Specific Features and Marketing\n\nGiven the significant presence of young users (especially students under 20), I suggest developing youth-oriented features or movie collections (e.g., \"Top Picks for Students\" or \"Movies for Young Audiences\").  \nSimilarly, targeting users based on occupation (such as scientists or other professionals) can support niche content curation and specialized marketing campaigns.\n\n---\n\n### 4. Encourage Engagement among Inactive or New Users\n\nMost high-engagement users contribute significantly to rating diversity and overall platform activity.  \nTo cultivate more active users, I recommend providing incentives for rating more movies, such as gamified achievements, badges, or personalized rewards for users who reach certain rating milestones.\n\n---\n\n### 5. Ensure Fairness in Ratings and Rankings\n\nTo avoid biases caused by a small number of ratings, always apply a minimum rating count threshold when displaying average scores or generating \"top movie\" lists.  \nThis approach ensures fairer and more reliable recommendations.\n\n---\n\n### 6. Enable Deeper User Segmentation for Advanced Analytics\n\nThe ability to filter by age, occupation, and other user attributes is powerful for research and platform optimization.  \nI recommend maintaining and possibly expanding user profile fields, enabling even finer segmentation and targeted feature development in the future.\n\n---\n\n### 7. Continue Data Quality Checks and Enrichment\n\nThe analysis relies on the completeness and accuracy of user and movie metadata.  \nI recommend routine data quality audits and, if possible, enriching the dataset with additional information such as more detailed genre tags, user watch history, or explicit feedback on recommendations.\n\n---\n\n**Summary:**  \nImplementing these recommendations can improve the user experience, increase engagement, and allow for more precise movie suggestions and platform growth. Continuous data analysis should be a standard practice to adapt to evolving user interests and behaviors.\n","user":"anonymous","dateUpdated":"2025-06-17T09:15:37+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>Recommendations</h2>\n<p>Based on the analysis of the MovieLens 100k dataset and the key insights obtained from each step, I propose the following recommendations for future work, platform design, and research directions:</p>\n<hr />\n<h3>1. Improve Recommendation Systems with Popularity and Stability</h3>\n<p>Since movies with a high number of ratings and a stable average score generally reflect broad audience appeal, I recommend giving these movies more weight in collaborative filtering and popularity-based recommendation algorithms.\n<br  />Additionally, highlighting consistently popular movies can increase user satisfaction, especially for new or undecided users.</p>\n<hr />\n<h3>2. Adjust Genre Recommendations According to User Activity</h3>\n<p>The analysis shows that highly active users tend to have clear genre preferences.\n<br  />I recommend personalizing genre-based recommendations for these users, prioritizing their most frequently rated genres.\n<br  />For less active users, a diverse mix of genres may help them discover their specific interests.</p>\n<hr />\n<h3>3. Create Demographic-Specific Features and Marketing</h3>\n<p>Given the significant presence of young users (especially students under 20), I suggest developing youth-oriented features or movie collections (e.g., &ldquo;Top Picks for Students&rdquo; or &ldquo;Movies for Young Audiences&rdquo;).\n<br  />Similarly, targeting users based on occupation (such as scientists or other professionals) can support niche content curation and specialized marketing campaigns.</p>\n<hr />\n<h3>4. Encourage Engagement among Inactive or New Users</h3>\n<p>Most high-engagement users contribute significantly to rating diversity and overall platform activity.\n<br  />To cultivate more active users, I recommend providing incentives for rating more movies, such as gamified achievements, badges, or personalized rewards for users who reach certain rating milestones.</p>\n<hr />\n<h3>5. Ensure Fairness in Ratings and Rankings</h3>\n<p>To avoid biases caused by a small number of ratings, always apply a minimum rating count threshold when displaying average scores or generating &ldquo;top movie&rdquo; lists.\n<br  />This approach ensures fairer and more reliable recommendations.</p>\n<hr />\n<h3>6. Enable Deeper User Segmentation for Advanced Analytics</h3>\n<p>The ability to filter by age, occupation, and other user attributes is powerful for research and platform optimization.\n<br  />I recommend maintaining and possibly expanding user profile fields, enabling even finer segmentation and targeted feature development in the future.</p>\n<hr />\n<h3>7. Continue Data Quality Checks and Enrichment</h3>\n<p>The analysis relies on the completeness and accuracy of user and movie metadata.\n<br  />I recommend routine data quality audits and, if possible, enriching the dataset with additional information such as more detailed genre tags, user watch history, or explicit feedback on recommendations.</p>\n<hr />\n<p><strong>Summary:</strong>\n<br  />Implementing these recommendations can improve the user experience, increase engagement, and allow for more precise movie suggestions and platform growth. Continuous data analysis should be a standard practice to adapt to evolving user interests and behaviors.</p>\n"}]},"apps":[],"jobName":"paragraph_1750150690609_2031415921","id":"20250612-070526_92965248","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:38+0000","dateFinished":"2025-06-17T09:15:38+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39365"},{"text":"%md\r\n## Conclusion\r\n\r\nIn this project, I carried out a comprehensive analysis of the MovieLens 100k dataset using Spark SQL and PySpark DataFrame operations. My workflow covered every key stage, including data ingestion, schema definition, RDD and DataFrame transformations, and the application of advanced query logic. Throughout the process, I examined the characteristics of both movies and users in detail, deriving valuable insights for platform optimization and recommendation strategies.\r\n\r\n---\r\n\r\n### Key Findings\r\n\r\n- **Movie Ratings:**  \r\n  I successfully calculated the average rating for each movie, revealing both overall audience sentiment and the reliability of ratings based on rating count.\r\n\r\n- **Top Rated Movies:**  \r\n  By identifying the ten movies with the highest average ratings (with sufficient rating counts), I showed which titles are most appreciated by the community. This method also demonstrated the importance of accounting for popularity alongside rating averages.\r\n\r\n- **User Activity & Genre Preference:**  \r\n  I found that highly active users (those who have rated at least 50 movies) tend to show clear genre preferences. Most frequently, genres like \"Drama\" and \"Action\" stood out among top contributors, highlighting opportunities for more personalized recommendations.\r\n\r\n- **User Demographics:**  \r\n  My analysis of age and occupation revealed that a significant portion of the platform’s users are young, with students under 20 making up a considerable group. I also filtered out niche groups, such as scientists aged 30–40, to demonstrate how user segmentation can inform targeted marketing and content curation.\r\n\r\n---\r\n\r\n### Analytical Strengths\r\n\r\n- The pipeline utilized PySpark’s distributed computing capabilities, enabling efficient processing of large datasets.\r\n- I made use of both SQL and DataFrame APIs, allowing for flexible, powerful data exploration and transformation.\r\n- Each major step included data validation and summary statistics, ensuring reliable interpretations and actionable insights.\r\n\r\n---\r\n\r\n### Final Thoughts\r\n\r\nThis end-to-end workflow demonstrates how big data technologies can unlock actionable knowledge from real-world user behavior and preferences.  \r\nBy systematically analyzing both movies and user groups, I have established a robust framework for data-driven improvements to recommendation platforms.  \r\nContinuous analysis and iteration will be essential as audience interests evolve and as more data becomes available.","user":"anonymous","dateUpdated":"2025-06-17T09:15:38+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>Conclusion</h2>\n<p>In this project, I carried out a comprehensive analysis of the MovieLens 100k dataset using Spark SQL and PySpark DataFrame operations. My workflow covered every key stage, including data ingestion, schema definition, RDD and DataFrame transformations, and the application of advanced query logic. Throughout the process, I examined the characteristics of both movies and users in detail, deriving valuable insights for platform optimization and recommendation strategies.</p>\n<hr />\n<h3>Key Findings</h3>\n<ul>\n<li><p><strong>Movie Ratings:</strong>\n<br  />I successfully calculated the average rating for each movie, revealing both overall audience sentiment and the reliability of ratings based on rating count.</p>\n</li>\n<li><p><strong>Top Rated Movies:</strong>\n<br  />By identifying the ten movies with the highest average ratings (with sufficient rating counts), I showed which titles are most appreciated by the community. This method also demonstrated the importance of accounting for popularity alongside rating averages.</p>\n</li>\n<li><p><strong>User Activity &amp; Genre Preference:</strong>\n<br  />I found that highly active users (those who have rated at least 50 movies) tend to show clear genre preferences. Most frequently, genres like &ldquo;Drama&rdquo; and &ldquo;Action&rdquo; stood out among top contributors, highlighting opportunities for more personalized recommendations.</p>\n</li>\n<li><p><strong>User Demographics:</strong>\n<br  />My analysis of age and occupation revealed that a significant portion of the platform’s users are young, with students under 20 making up a considerable group. I also filtered out niche groups, such as scientists aged 30–40, to demonstrate how user segmentation can inform targeted marketing and content curation.</p>\n</li>\n</ul>\n<hr />\n<h3>Analytical Strengths</h3>\n<ul>\n<li>The pipeline utilized PySpark’s distributed computing capabilities, enabling efficient processing of large datasets.</li>\n<li>I made use of both SQL and DataFrame APIs, allowing for flexible, powerful data exploration and transformation.</li>\n<li>Each major step included data validation and summary statistics, ensuring reliable interpretations and actionable insights.</li>\n</ul>\n<hr />\n<h3>Final Thoughts</h3>\n<p>This end-to-end workflow demonstrates how big data technologies can unlock actionable knowledge from real-world user behavior and preferences.\n<br  />By systematically analyzing both movies and user groups, I have established a robust framework for data-driven improvements to recommendation platforms.\n<br  />Continuous analysis and iteration will be essential as audience interests evolve and as more data becomes available.</p>\n"}]},"apps":[],"jobName":"paragraph_1750150690609_2031415921","id":"20250613-155925_557611216","dateCreated":"2025-06-17T08:58:10+0000","dateStarted":"2025-06-17T09:15:38+0000","dateFinished":"2025-06-17T09:15:38+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39366"},{"text":"%md\n","user":"anonymous","dateUpdated":"2025-06-17T09:15:38+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","results":{},"enabled":true,"editorSetting":{"language":"markdown","editOnDblClick":true}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1750150690610_2032570168","id":"20250613-160251_1873093756","dateCreated":"2025-06-17T08:58:10+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:39367"}],"name":"MovieLens_Spark_Analysis","id":"2KX4FVA9Q","angularObjects":{"2CHS8UYQQ:shared_process":[],"2C8A4SZ9T_livy2:shared_process":[],"2CK8A9MEG:shared_process":[],"2C4U48MY3_spark2:shared_process":[],"2CKAY1A8Y:shared_process":[],"2CKEKWY8Z:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}