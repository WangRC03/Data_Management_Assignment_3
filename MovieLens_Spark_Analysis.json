{"paragraphs":[{"text":"%md\n## 1.Python libraries","user":"anonymous","dateUpdated":"2025-06-13T14:11:18+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>1.Python libraries</h2>\n"}]},"apps":[],"jobName":"paragraph_1749818821655_1392318274","id":"20250613-124701_316119759","dateCreated":"2025-06-13T12:47:01+0000","dateStarted":"2025-06-13T14:11:18+0000","dateFinished":"2025-06-13T14:11:18+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:61224"},{"text":"%pyspark\r\nfrom pyspark.sql import SparkSession\r\nfrom pyspark.sql import functions as F\r\nfrom pyspark.sql.types import StructType, StructField, IntegerType, StringType\r\nfrom pyspark.sql.functions import col, avg, count","user":"anonymous","dateUpdated":"2025-06-13T14:08:58+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1749710620600_-662751345","id":"20250612-064340_1833401777","dateCreated":"2025-06-12T06:43:40+0000","dateStarted":"2025-06-13T14:08:58+0000","dateFinished":"2025-06-13T14:08:58+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61225"},{"text":"%md\n### Initialize Spark session","user":"anonymous","dateUpdated":"2025-06-13T12:47:49+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Initialize Spark session</h3>\n"}]},"apps":[],"jobName":"paragraph_1749818840279_196149267","id":"20250613-124720_2090022440","dateCreated":"2025-06-13T12:47:20+0000","dateStarted":"2025-06-13T12:47:49+0000","dateFinished":"2025-06-13T12:47:49+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61226"},{"text":"%pyspark\r\nspark = SparkSession.builder\\\r\n    .appName(\"MovieLensAnalysis\")\\\r\n    .enableHiveSupport()\\\r\n    .config(\"spark.sql.shuffle.partitions\", 8)\\\r\n    .getOrCreate()\r\n\r\nprint(\"Spark version:\", spark.version)","user":"anonymous","dateUpdated":"2025-06-13T14:09:09+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"('Spark version:', u'2.3.0.2.6.5.0-292')\n"}]},"apps":[],"jobName":"paragraph_1749818676912_700742255","id":"20250613-124436_1941043312","dateCreated":"2025-06-13T12:44:36+0000","dateStarted":"2025-06-13T14:09:09+0000","dateFinished":"2025-06-13T14:09:09+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61227"},{"text":"%md\n## 2.Parse the u.user file into HDFS","user":"anonymous","dateUpdated":"2025-06-13T14:02:12+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>2.Parse the u.user file into HDFS</h2>\n"}]},"apps":[],"jobName":"paragraph_1749820746607_-1421591807","id":"20250613-131906_212264064","dateCreated":"2025-06-13T13:19:06+0000","dateStarted":"2025-06-13T14:02:12+0000","dateFinished":"2025-06-13T14:02:12+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61228"},{"text":"%sh\nhdfs dfs -mkdir -p /user/maria_dev/ml-100k/","user":"anonymous","dateUpdated":"2025-06-13T14:02:26+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"sh","editOnDblClick":false},"editorMode":"ace/mode/sh"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1749823336896_72865390","id":"20250613-140216_248531266","dateCreated":"2025-06-13T14:02:16+0000","dateStarted":"2025-06-13T14:02:26+0000","dateFinished":"2025-06-13T14:02:28+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61229"},{"text":"%sh\nhdfs dfs -put -f /tmp/ml-100k/u.user /user/maria_dev/ml-100k/u.user\nhdfs dfs -put -f /tmp/ml-100k/u.item /user/maria_dev/ml-100k/u.item\nhdfs dfs -put -f /tmp/ml-100k/u.data /user/maria_dev/ml-100k/u.data\nhdfs dfs -ls /user/maria_dev/ml-100k/","user":"anonymous","dateUpdated":"2025-06-13T14:02:52+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"sh","editOnDblClick":false},"editorMode":"ace/mode/sh"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Found 7 items\ndrwxr-xr-x   - zeppelin hdfs          0 2025-06-13 13:02 /user/maria_dev/ml-100k/\r\n-rw-r--r--   1 zeppelin hdfs    1979173 2025-06-13 14:02 /user/maria_dev/ml-100k/u.data\n-rw-r--r--   1 zeppelin hdfs    1979173 2025-06-13 13:14 /user/maria_dev/ml-100k/u.data\r\n-rw-r--r--   1 zeppelin hdfs     236344 2025-06-13 14:02 /user/maria_dev/ml-100k/u.item\n-rw-r--r--   1 zeppelin hdfs     236344 2025-06-13 13:14 /user/maria_dev/ml-100k/u.item\r\n-rw-r--r--   1 zeppelin hdfs      22628 2025-06-13 14:02 /user/maria_dev/ml-100k/u.user\n-rw-r--r--   1 zeppelin hdfs      22628 2025-06-13 13:14 /user/maria_dev/ml-100k/u.user\r\n"}]},"apps":[],"jobName":"paragraph_1749820541319_-181048627","id":"20250613-131541_373727213","dateCreated":"2025-06-13T13:15:41+0000","dateStarted":"2025-06-13T14:02:52+0000","dateFinished":"2025-06-13T14:02:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61230"},{"text":"%md\n## 3. Load, Read, and Create Resilient Distributed Dataset (RDD) Objects.","user":"anonymous","dateUpdated":"2025-06-13T14:03:25+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>3. Load, Read, and Create Resilient Distributed Dataset (RDD) Objects.</h2>\n"}]},"apps":[],"jobName":"paragraph_1749821338045_-768044632","id":"20250613-132858_434951925","dateCreated":"2025-06-13T13:28:58+0000","dateStarted":"2025-06-13T14:03:25+0000","dateFinished":"2025-06-13T14:03:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61231"},{"text":"%md\n### Loading from HDFS as RDD","user":"anonymous","dateUpdated":"2025-06-13T13:30:16+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Loading from HDFS as RDD</h3>\n"}]},"apps":[],"jobName":"paragraph_1749821371809_-1995916290","id":"20250613-132931_1118460460","dateCreated":"2025-06-13T13:29:31+0000","dateStarted":"2025-06-13T13:30:16+0000","dateFinished":"2025-06-13T13:30:16+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61232"},{"text":"%pyspark\r\nuser_rdd = sc.textFile(\"hdfs:///user/maria_dev/ml-100k/u.user\")\r\nuser_rdd.take(5)","user":"anonymous","dateUpdated":"2025-06-13T13:22:49+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[u'1|24|M|technician|85711', u'2|53|F|other|94043', u'3|23|M|writer|32067', u'4|24|M|technician|43537', u'5|33|F|other|15213']\n"}]},"apps":[],"jobName":"paragraph_1749820931489_523358211","id":"20250613-132211_262351753","dateCreated":"2025-06-13T13:22:11+0000","dateStarted":"2025-06-13T13:22:49+0000","dateFinished":"2025-06-13T13:22:49+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61233"},{"text":"%pyspark\nitem_rdd = sc.textFile(\"hdfs:///user/maria_dev/ml-100k/u.item\")\nitem_rdd.take(5)","user":"anonymous","dateUpdated":"2025-06-13T13:25:42+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[u'1|Toy Story (1995)|01-Jan-1995||http://us.imdb.com/M/title-exact?Toy%20Story%20(1995)|0|0|0|1|1|1|0|0|0|0|0|0|0|0|0|0|0|0|0', u'2|GoldenEye (1995)|01-Jan-1995||http://us.imdb.com/M/title-exact?GoldenEye%20(1995)|0|1|1|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0', u'3|Four Rooms (1995)|01-Jan-1995||http://us.imdb.com/M/title-exact?Four%20Rooms%20(1995)|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0', u'4|Get Shorty (1995)|01-Jan-1995||http://us.imdb.com/M/title-exact?Get%20Shorty%20(1995)|0|1|0|0|0|1|0|0|1|0|0|0|0|0|0|0|0|0|0', u'5|Copycat (1995)|01-Jan-1995||http://us.imdb.com/M/title-exact?Copycat%20(1995)|0|0|0|0|0|0|1|0|1|0|0|0|0|0|0|0|1|0|0']\n"}]},"apps":[],"jobName":"paragraph_1749821099272_-1891247621","id":"20250613-132459_874863762","dateCreated":"2025-06-13T13:24:59+0000","dateStarted":"2025-06-13T13:25:42+0000","dateFinished":"2025-06-13T13:25:42+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61234"},{"text":"%pyspark\ndata_rdd = sc.textFile(\"hdfs:///user/maria_dev/ml-100k/u.data\")\ndata_rdd.take(5)","user":"anonymous","dateUpdated":"2025-06-13T13:25:44+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[u'196\\t242\\t3\\t881250949', u'186\\t302\\t3\\t891717742', u'22\\t377\\t1\\t878887116', u'244\\t51\\t2\\t880606923', u'166\\t346\\t1\\t886397596']\n"}]},"apps":[],"jobName":"paragraph_1749821100683_-955153547","id":"20250613-132500_795064990","dateCreated":"2025-06-13T13:25:00+0000","dateStarted":"2025-06-13T13:25:44+0000","dateFinished":"2025-06-13T13:25:45+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61235"},{"text":"%md\n### Parsing RDD","user":"anonymous","dateUpdated":"2025-06-13T13:30:47+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Parsing RDD</h3>\n"}]},"apps":[],"jobName":"paragraph_1749821421629_1603486291","id":"20250613-133021_1519437662","dateCreated":"2025-06-13T13:30:21+0000","dateStarted":"2025-06-13T13:30:47+0000","dateFinished":"2025-06-13T13:30:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61236"},{"text":"%pyspark\nuser_parsed_rdd = user_rdd.map(lambda line: line.split('|'))\nuser_parsed_rdd.take(5)","user":"anonymous","dateUpdated":"2025-06-13T13:23:17+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[[u'1', u'24', u'M', u'technician', u'85711'], [u'2', u'53', u'F', u'other', u'94043'], [u'3', u'23', u'M', u'writer', u'32067'], [u'4', u'24', u'M', u'technician', u'43537'], [u'5', u'33', u'F', u'other', u'15213']]\n"}]},"apps":[],"jobName":"paragraph_1749820984730_1560934050","id":"20250613-132304_873596449","dateCreated":"2025-06-13T13:23:04+0000","dateStarted":"2025-06-13T13:23:17+0000","dateFinished":"2025-06-13T13:23:17+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61237"},{"text":"%pyspark\nitem_parsed_rdd = item_rdd.map(lambda line: line.split('|'))\nitem_parsed_rdd.take(3)","user":"anonymous","dateUpdated":"2025-06-13T13:27:49+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[[u'1', u'Toy Story (1995)', u'01-Jan-1995', u'', u'http://us.imdb.com/M/title-exact?Toy%20Story%20(1995)', u'0', u'0', u'0', u'1', u'1', u'1', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0'], [u'2', u'GoldenEye (1995)', u'01-Jan-1995', u'', u'http://us.imdb.com/M/title-exact?GoldenEye%20(1995)', u'0', u'1', u'1', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'1', u'0', u'0'], [u'3', u'Four Rooms (1995)', u'01-Jan-1995', u'', u'http://us.imdb.com/M/title-exact?Four%20Rooms%20(1995)', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'1', u'0', u'0']]\n"}]},"apps":[],"jobName":"paragraph_1749821151913_-1911578016","id":"20250613-132551_554682406","dateCreated":"2025-06-13T13:25:51+0000","dateStarted":"2025-06-13T13:27:49+0000","dateFinished":"2025-06-13T13:27:49+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61238"},{"text":"%pyspark\ndata_parsed_rdd = data_rdd.map(lambda line: line.split('\\t'))\ndata_parsed_rdd.take(5)","user":"anonymous","dateUpdated":"2025-06-13T13:28:26+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[[u'196', u'242', u'3', u'881250949'], [u'186', u'302', u'3', u'891717742'], [u'22', u'377', u'1', u'878887116'], [u'244', u'51', u'2', u'880606923'], [u'166', u'346', u'1', u'886397596']]\n"}]},"apps":[],"jobName":"paragraph_1749821153650_1394599931","id":"20250613-132553_1272870490","dateCreated":"2025-06-13T13:25:53+0000","dateStarted":"2025-06-13T13:28:26+0000","dateFinished":"2025-06-13T13:28:26+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61239"},{"text":"%md\n### Convert to a structured dictionary","user":"anonymous","dateUpdated":"2025-06-13T13:31:45+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Convert to a structured dictionary</h3>\n"}]},"apps":[],"jobName":"paragraph_1749821494752_166139377","id":"20250613-133134_661736307","dateCreated":"2025-06-13T13:31:34+0000","dateStarted":"2025-06-13T13:31:45+0000","dateFinished":"2025-06-13T13:31:45+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61240"},{"text":"%pyspark\nuser_dict_rdd = user_parsed_rdd.map(lambda arr: {\n    \"user_id\": int(arr[0]),\n    \"age\": int(arr[1]),\n    \"gender\": arr[2],\n    \"occupation\": arr[3],\n    \"zip_code\": arr[4]\n})\n\nuser_dict_rdd.take(5)","user":"anonymous","dateUpdated":"2025-06-13T13:23:51+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[{'gender': u'M', 'age': 24, 'occupation': u'technician', 'user_id': 1, 'zip_code': u'85711'}, {'gender': u'F', 'age': 53, 'occupation': u'other', 'user_id': 2, 'zip_code': u'94043'}, {'gender': u'M', 'age': 23, 'occupation': u'writer', 'user_id': 3, 'zip_code': u'32067'}, {'gender': u'M', 'age': 24, 'occupation': u'technician', 'user_id': 4, 'zip_code': u'43537'}, {'gender': u'F', 'age': 33, 'occupation': u'other', 'user_id': 5, 'zip_code': u'15213'}]\n"}]},"apps":[],"jobName":"paragraph_1749821024712_-951045547","id":"20250613-132344_590173069","dateCreated":"2025-06-13T13:23:44+0000","dateStarted":"2025-06-13T13:23:51+0000","dateFinished":"2025-06-13T13:23:51+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61241"},{"text":"%pyspark\ngenres = [\n    \"unknown\", \"Action\", \"Adventure\", \"Animation\", \"Children\", \"Comedy\", \"Crime\", \"Documentary\", \"Drama\",\n    \"Fantasy\", \"Film-Noir\", \"Horror\", \"Musical\", \"Mystery\", \"Romance\", \"Sci-Fi\", \"Thriller\", \"War\", \"Western\"]\n\nitem_dict_rdd = item_parsed_rdd.map(lambda arr: {\n    \"movie_id\": int(arr[0]),\n    \"movie_title\": arr[1],\n    \"release_date\": arr[2],\n    \"video_release_date\": arr[3],\n    \"IMDb_URL\": arr[4],\n    \"genres\": [genres[i] for i in range(19) if int(arr[5+i]) == 1]\n})\n\nitem_dict_rdd.take(1)","user":"anonymous","dateUpdated":"2025-06-13T13:48:32+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[{'video_release_date': u'', 'genres': ['Animation', 'Children', 'Comedy'], 'movie_id': 1, 'release_date': u'01-Jan-1995', 'movie_title': u'Toy Story (1995)', 'IMDb_URL': u'http://us.imdb.com/M/title-exact?Toy%20Story%20(1995)'}]\n"}]},"apps":[],"jobName":"paragraph_1749821508906_1637449819","id":"20250613-133148_1272030015","dateCreated":"2025-06-13T13:31:48+0000","dateStarted":"2025-06-13T13:48:32+0000","dateFinished":"2025-06-13T13:48:32+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61242"},{"text":"%pyspark\ndata_dict_rdd = data_parsed_rdd.map(lambda arr: {\n    \"user_id\": int(arr[0]),\n    \"movie_id\": int(arr[1]),\n    \"rating\": int(arr[2]),\n    \"timestamp\": int(arr[3])\n})\ndata_dict_rdd.take(3)","user":"anonymous","dateUpdated":"2025-06-13T13:33:02+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[{'rating': 3, 'user_id': 196, 'movie_id': 242, 'timestamp': 881250949}, {'rating': 3, 'user_id': 186, 'movie_id': 302, 'timestamp': 891717742}, {'rating': 1, 'user_id': 22, 'movie_id': 377, 'timestamp': 878887116}]\n"}]},"apps":[],"jobName":"paragraph_1749821510673_-1947655756","id":"20250613-133150_547184446","dateCreated":"2025-06-13T13:31:50+0000","dateStarted":"2025-06-13T13:33:02+0000","dateFinished":"2025-06-13T13:33:03+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61243"},{"text":"%md\n## 4. Convert the RDD objects into DataFrames.","user":"anonymous","dateUpdated":"2025-06-13T14:03:39+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>4. Convert the RDD objects into DataFrames.</h2>\n"}]},"apps":[],"jobName":"paragraph_1749821833607_-747160399","id":"20250613-133713_1870257154","dateCreated":"2025-06-13T13:37:13+0000","dateStarted":"2025-06-13T14:03:39+0000","dateFinished":"2025-06-13T14:03:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61244"},{"text":"%pyspark\nfrom pyspark.sql.types import StructType, StructField, IntegerType, StringType\n\nuser_schema = StructType([\n    StructField(\"user_id\", IntegerType(), True),\n    StructField(\"age\", IntegerType(), True),\n    StructField(\"gender\", StringType(), True),\n    StructField(\"occupation\", StringType(), True),\n    StructField(\"zip_code\", StringType(), True)\n])\n\nusers_df = spark.createDataFrame(user_dict_rdd, schema=user_schema)\nusers_df.show(5)","user":"anonymous","dateUpdated":"2025-06-13T13:40:26+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+---+------+----------+--------+\n|user_id|age|gender|occupation|zip_code|\n+-------+---+------+----------+--------+\n|      1| 24|     M|technician|   85711|\n|      2| 53|     F|     other|   94043|\n|      3| 23|     M|    writer|   32067|\n|      4| 24|     M|technician|   43537|\n|      5| 33|     F|     other|   15213|\n+-------+---+------+----------+--------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1749821997408_-1520308118","id":"20250613-133957_419755101","dateCreated":"2025-06-13T13:39:57+0000","dateStarted":"2025-06-13T13:40:26+0000","dateFinished":"2025-06-13T13:40:26+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61245"},{"text":"%pyspark\r\nfrom pyspark.sql.types import ArrayType, StringType, StructType, StructField, IntegerType\r\n\r\nitem_schema = StructType([\r\n    StructField(\"movie_id\", IntegerType(), True),\r\n    StructField(\"movie_title\", StringType(), True),\r\n    StructField(\"release_date\", StringType(), True),\r\n    StructField(\"video_release_date\", StringType(), True),\r\n    StructField(\"IMDb_URL\", StringType(), True),\r\n    StructField(\"genres\", ArrayType(StringType()), True)\r\n])\r\n\r\nitems_df = spark.createDataFrame(item_dict_rdd, schema=item_schema)\r\nitems_df.show(5, truncate=False)","user":"anonymous","dateUpdated":"2025-06-13T13:48:40+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+-----------------+------------+------------------+------------------------------------------------------+-----------------------------+\n|movie_id|movie_title      |release_date|video_release_date|IMDb_URL                                              |genres                       |\n+--------+-----------------+------------+------------------+------------------------------------------------------+-----------------------------+\n|1       |Toy Story (1995) |01-Jan-1995 |                  |http://us.imdb.com/M/title-exact?Toy%20Story%20(1995) |[Animation, Children, Comedy]|\n|2       |GoldenEye (1995) |01-Jan-1995 |                  |http://us.imdb.com/M/title-exact?GoldenEye%20(1995)   |[Action, Adventure, Thriller]|\n|3       |Four Rooms (1995)|01-Jan-1995 |                  |http://us.imdb.com/M/title-exact?Four%20Rooms%20(1995)|[Thriller]                   |\n|4       |Get Shorty (1995)|01-Jan-1995 |                  |http://us.imdb.com/M/title-exact?Get%20Shorty%20(1995)|[Action, Comedy, Drama]      |\n|5       |Copycat (1995)   |01-Jan-1995 |                  |http://us.imdb.com/M/title-exact?Copycat%20(1995)     |[Crime, Drama, Thriller]     |\n+--------+-----------------+------------+------------------+------------------------------------------------------+-----------------------------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1749822059165_-1850529944","id":"20250613-134059_1579707385","dateCreated":"2025-06-13T13:40:59+0000","dateStarted":"2025-06-13T13:48:40+0000","dateFinished":"2025-06-13T13:48:40+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61246"},{"text":"%pyspark\ndata_schema = StructType([\n    StructField(\"user_id\", IntegerType(), True),\n    StructField(\"movie_id\", IntegerType(), True),\n    StructField(\"rating\", IntegerType(), True),\n    StructField(\"timestamp\", IntegerType(), True)\n])\n\nratings_df = spark.createDataFrame(data_dict_rdd, schema=data_schema)\nratings_df.show(5)","user":"anonymous","dateUpdated":"2025-06-13T13:42:59+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+--------+------+---------+\n|user_id|movie_id|rating|timestamp|\n+-------+--------+------+---------+\n|    196|     242|     3|881250949|\n|    186|     302|     3|891717742|\n|     22|     377|     1|878887116|\n|    244|      51|     2|880606923|\n|    166|     346|     1|886397596|\n+-------+--------+------+---------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1749822147745_-1084724746","id":"20250613-134227_1054590018","dateCreated":"2025-06-13T13:42:27+0000","dateStarted":"2025-06-13T13:42:59+0000","dateFinished":"2025-06-13T13:42:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61247"},{"text":"%pyspark\nuser_df.createOrReplaceTempView(\"users\")\nitem_df.createOrReplaceTempView(\"items\")\nrating_df.createOrReplaceTempView(\"ratings\")","user":"anonymous","dateUpdated":"2025-06-13T13:43:30+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1749711017366_-2060375533","id":"20250612-065017_1262819177","dateCreated":"2025-06-12T06:50:17+0000","dateStarted":"2025-06-13T13:43:30+0000","dateFinished":"2025-06-13T13:43:30+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61248"},{"text":"%md\n## 5. Write the DataFrame into the Keyspace database","user":"anonymous","dateUpdated":"2025-06-13T14:03:56+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>5. Write the DataFrame into the Keyspace database</h2>\n"}]},"apps":[],"jobName":"paragraph_1749822753968_364661587","id":"20250613-135233_573705905","dateCreated":"2025-06-13T13:52:33+0000","dateStarted":"2025-06-13T14:03:56+0000","dateFinished":"2025-06-13T14:03:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61249"},{"text":"%pyspark\nspark.sql(\"CREATE DATABASE IF NOT EXISTS movielens\")","user":"anonymous","dateUpdated":"2025-06-13T13:54:03+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"DataFrame[]\n"}]},"apps":[],"jobName":"paragraph_1749822826288_17156709","id":"20250613-135346_1018933957","dateCreated":"2025-06-13T13:53:46+0000","dateStarted":"2025-06-13T13:54:03+0000","dateFinished":"2025-06-13T13:54:03+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61250"},{"text":"%pyspark\nusers_df.write.mode(\"overwrite\").saveAsTable(\"movielens.users\")\nitems_df.write.mode(\"overwrite\").saveAsTable(\"movielens.items\")\nratings_df.write.mode(\"overwrite\").saveAsTable(\"movielens.ratings\")","user":"anonymous","dateUpdated":"2025-06-13T13:56:05+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1749822828589_2074409078","id":"20250613-135348_556805268","dateCreated":"2025-06-13T13:53:48+0000","dateStarted":"2025-06-13T13:56:05+0000","dateFinished":"2025-06-13T13:56:11+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61251"},{"text":"%pyspark\nspark.sql(\"SELECT * FROM movielens.users LIMIT 5\").show()","user":"anonymous","dateUpdated":"2025-06-13T13:56:29+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+---+------+----------+--------+\n|user_id|age|gender|occupation|zip_code|\n+-------+---+------+----------+--------+\n|    472| 24|     M|   student|   87544|\n|    473| 29|     M|   student|   94708|\n|    474| 51|     M| executive|   93711|\n|    475| 30|     M|programmer|   75230|\n|    476| 28|     M|   student|   60440|\n+-------+---+------+----------+--------+\n\n"}]},"apps":[],"jobName":"paragraph_1749822983211_-1080685145","id":"20250613-135623_1606675823","dateCreated":"2025-06-13T13:56:23+0000","dateStarted":"2025-06-13T13:56:29+0000","dateFinished":"2025-06-13T13:56:29+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61252"},{"text":"%md\n## 6. Read the table back into a new DataFrame.","user":"anonymous","dateUpdated":"2025-06-13T14:04:10+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>6. Read the table back into a new DataFrame.</h2>\n"}]},"apps":[],"jobName":"paragraph_1749823186088_2097815820","id":"20250613-135946_1420990454","dateCreated":"2025-06-13T13:59:46+0000","dateStarted":"2025-06-13T14:04:10+0000","dateFinished":"2025-06-13T14:04:10+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61253"},{"text":"%pyspark\r\nusers_new_df = spark.read.table(\"movielens.users\")\r\nusers_new_df.show(5)","user":"anonymous","dateUpdated":"2025-06-13T13:59:27+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+---+------+----------+--------+\n|user_id|age|gender|occupation|zip_code|\n+-------+---+------+----------+--------+\n|    472| 24|     M|   student|   87544|\n|    473| 29|     M|   student|   94708|\n|    474| 51|     M| executive|   93711|\n|    475| 30|     M|programmer|   75230|\n|    476| 28|     M|   student|   60440|\n+-------+---+------+----------+--------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1749823119045_-629607836","id":"20250613-135839_2016386427","dateCreated":"2025-06-13T13:58:39+0000","dateStarted":"2025-06-13T13:59:27+0000","dateFinished":"2025-06-13T13:59:28+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61254"},{"text":"%pyspark\nitems_new_df = spark.read.table(\"movielens.items\")\nitems_new_df.show(5, truncate=False)","user":"anonymous","dateUpdated":"2025-06-13T13:59:31+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+------------------------+------------+------------------+-----------------------------------------------------------------+-------------------------+\n|movie_id|movie_title             |release_date|video_release_date|IMDb_URL                                                         |genres                   |\n+--------+------------------------+------------+------------------+-----------------------------------------------------------------+-------------------------+\n|839     |Loch Ness (1995)        |01-Jan-1995 |                  |http://us.imdb.com/M/title-exact?Loch%20Ness%20(1995)            |[Horror, Thriller]       |\n|840     |Last Man Standing (1996)|20-Sep-1996 |                  |http://us.imdb.com/M/title-exact?Last%20Man%20Standing%20(1996/I)|[Action, Drama, Western] |\n|841     |Glimmer Man, The (1996) |04-Oct-1996 |                  |http://us.imdb.com/M/title-exact?Glimmer%20Man,%20The%20(1996)   |[Action, Thriller]       |\n|842     |Pollyanna (1960)        |01-Jan-1960 |                  |http://us.imdb.com/M/title-exact?Pollyanna%20(1960)              |[Children, Comedy, Drama]|\n|843     |Shaggy Dog, The (1959)  |01-Jan-1959 |                  |http://us.imdb.com/M/title-exact?Shaggy%20Dog,%20The%20(1959)    |[Children, Comedy]       |\n+--------+------------------------+------------+------------------+-----------------------------------------------------------------+-------------------------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1749823141591_908865097","id":"20250613-135901_1734478189","dateCreated":"2025-06-13T13:59:01+0000","dateStarted":"2025-06-13T13:59:31+0000","dateFinished":"2025-06-13T13:59:31+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61255"},{"text":"%pyspark\nratings_new_df = spark.read.table(\"movielens.ratings\")\nratings_new_df.show(5)","user":"anonymous","dateUpdated":"2025-06-13T13:59:33+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+--------+------+---------+\n|user_id|movie_id|rating|timestamp|\n+-------+--------+------+---------+\n|    196|     242|     3|881250949|\n|    186|     302|     3|891717742|\n|     22|     377|     1|878887116|\n|    244|      51|     2|880606923|\n|    166|     346|     1|886397596|\n+-------+--------+------+---------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1749823139070_302885580","id":"20250613-135859_150813452","dateCreated":"2025-06-13T13:58:59+0000","dateStarted":"2025-06-13T13:59:33+0000","dateFinished":"2025-06-13T13:59:34+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61256"},{"text":"%md\n## i) Calculate the Average Rating for Each Movie","user":"anonymous","dateUpdated":"2025-06-13T08:52:31+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>i) Calculate the Average Rating for Each Movie</h2>\n"}]},"apps":[],"jobName":"paragraph_1749804703897_-787537278","id":"20250613-085143_693071539","dateCreated":"2025-06-13T08:51:43+0000","dateStarted":"2025-06-13T08:52:31+0000","dateFinished":"2025-06-13T08:52:31+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61257"},{"text":"%pyspark\navg_rating_with_name_df = spark.sql(\"\"\"\n    SELECT\n        i.movie_id,\n        i.movie_title,\n        AVG(r.rating) AS avg_rating,\n        COUNT(*) AS rating_count\n    FROM ratings r\n    JOIN items i ON r.movie_id = i.movie_id\n    GROUP BY i.movie_id, i.movie_title\n    ORDER BY i.movie_id\n\"\"\")\navg_rating_with_name_df.show(10, truncate=False)","user":"anonymous","dateUpdated":"2025-06-13T13:43:33+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+----------------------------------------------------+------------------+------------+\n|movie_id|movie_title                                         |avg_rating        |rating_count|\n+--------+----------------------------------------------------+------------------+------------+\n|1       |Toy Story (1995)                                    |3.8783185840707963|452         |\n|2       |GoldenEye (1995)                                    |3.2061068702290076|131         |\n|3       |Four Rooms (1995)                                   |3.033333333333333 |90          |\n|4       |Get Shorty (1995)                                   |3.550239234449761 |209         |\n|5       |Copycat (1995)                                      |3.302325581395349 |86          |\n|6       |Shanghai Triad (Yao a yao yao dao waipo qiao) (1995)|3.576923076923077 |26          |\n|7       |Twelve Monkeys (1995)                               |3.798469387755102 |392         |\n|8       |Babe (1995)                                         |3.9954337899543377|219         |\n|9       |Dead Man Walking (1995)                             |3.8963210702341136|299         |\n|10      |Richard III (1995)                                  |3.831460674157303 |89          |\n+--------+----------------------------------------------------+------------------+------------+\nonly showing top 10 rows\n\n"}]},"apps":[],"jobName":"paragraph_1749712946716_-2106699993","id":"20250612-072226_1138726021","dateCreated":"2025-06-12T07:22:26+0000","dateStarted":"2025-06-13T13:43:33+0000","dateFinished":"2025-06-13T13:43:34+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61258"},{"text":"%md\r\nIn this step, I want to calculate the average rating for each movie in the dataset.  \r\nI use a SQL query to join the ratings table and the items table. The ratings table provides all the user ratings, and the items table contains information about each movie, including the title.\r\n\r\nFor each movie, I group the ratings by the movie ID and movie title. Then calculate the average rating and the total number of ratings for each movie.  \r\nThis allows me to see not only how well a movie is rated on average, but also how many users have contributed to its score.\r\n\r\nAfter running the query, I display the results in a table. This table shows the movie ID, the movie title, the average rating, and the number of ratings for each movie.  \r\nBy looking at these results, we can quickly understand which movies are popular and how they are received by the audience.","user":"anonymous","dateUpdated":"2025-06-13T14:14:10+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>In this step, I want to calculate the average rating for each movie in the dataset.\n<br  />I use a SQL query to join the ratings table and the items table. The ratings table provides all the user ratings, and the items table contains information about each movie, including the title.</p>\n<p>For each movie, I group the ratings by the movie ID and movie title. Then calculate the average rating and the total number of ratings for each movie.\n<br  />This allows me to see not only how well a movie is rated on average, but also how many users have contributed to its score.</p>\n<p>After running the query, I display the results in a table. This table shows the movie ID, the movie title, the average rating, and the number of ratings for each movie.\n<br  />By looking at these results, we can quickly understand which movies are popular and how they are received by the audience.</p>\n"}]},"apps":[],"jobName":"paragraph_1749806336984_-1387615867","id":"20250613-091856_1089353708","dateCreated":"2025-06-13T09:18:56+0000","dateStarted":"2025-06-13T14:14:10+0000","dateFinished":"2025-06-13T14:14:10+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61259"},{"text":"%md\n## ii) Identifying the Top Ten Movies with the Highest Average Ratings","user":"anonymous","dateUpdated":"2025-06-13T08:52:47+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>ii) Identifying the Top Ten Movies with the Highest Average Ratings</h2>\n"}]},"apps":[],"jobName":"paragraph_1749803131162_-592903596","id":"20250613-082531_444800535","dateCreated":"2025-06-13T08:25:31+0000","dateStarted":"2025-06-13T08:52:47+0000","dateFinished":"2025-06-13T08:52:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61260"},{"text":"%pyspark\r\ntop10_movies_df = spark.sql(\"\"\"\r\n    SELECT\r\n        i.movie_id,\r\n        i.movie_title,\r\n        AVG(r.rating) AS avg_rating,\r\n        COUNT(*) AS rating_count\r\n    FROM ratings r\r\n    JOIN items i ON r.movie_id = i.movie_id\r\n    GROUP BY i.movie_id, i.movie_title\r\n    HAVING rating_count >= 50\r\n    ORDER BY avg_rating DESC, rating_count DESC\r\n    LIMIT 10\r\n\"\"\")\r\ntop10_movies_df.show(truncate=False)","user":"anonymous","dateUpdated":"2025-06-13T08:13:22+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+------------------------------------------------------+------------------+------------+\n|movie_id|movie_title                                           |avg_rating        |rating_count|\n+--------+------------------------------------------------------+------------------+------------+\n|408     |Close Shave, A (1995)                                 |4.491071428571429 |112         |\n|318     |Schindler's List (1993)                               |4.466442953020135 |298         |\n|169     |Wrong Trousers, The (1993)                            |4.466101694915254 |118         |\n|483     |Casablanca (1942)                                     |4.45679012345679  |243         |\n|114     |Wallace & Gromit: The Best of Aardman Animation (1996)|4.447761194029851 |67          |\n|64      |Shawshank Redemption, The (1994)                      |4.445229681978798 |283         |\n|603     |Rear Window (1954)                                    |4.3875598086124405|209         |\n|12      |Usual Suspects, The (1995)                            |4.385767790262173 |267         |\n|50      |Star Wars (1977)                                      |4.3584905660377355|583         |\n|178     |12 Angry Men (1957)                                   |4.344             |125         |\n+--------+------------------------------------------------------+------------------+------------+\n\n"}]},"apps":[],"jobName":"paragraph_1749711600411_1181910026","id":"20250612-070000_1260473448","dateCreated":"2025-06-12T07:00:00+0000","dateStarted":"2025-06-13T08:13:22+0000","dateFinished":"2025-06-13T08:13:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61261"},{"text":"%md\nIn this step, aiming to find the top ten movies with the highest average ratings.  \nI use SQL to aggregate the movie ratings data. First, join the `ratings` and `items` tables. The `ratings` table contains user ratings for each movie. The `items` table provides the movie titles and other metadata.\n\nI group the data by `movie_id` and `movie_title`. For each group, calculating the average rating and the total number of ratings.  \nThe average rating shows how much users enjoyed a particular movie. The rating count tells me how many users contributed to this score.\n\nAfter grouping and aggregation, sort the movies in descending order by their average rating. Using the `LIMIT 10` clause to select only the top ten movies.  \nThis approach highlights the highest-rated movies in the dataset.\n\nIt is important to note that I can add an extra filter on the rating count. For example, I might only consider movies that have received at least 50 ratings.  \nThis filter helps to avoid bias from movies with very few but very high ratings. For now, Display the top ten movies based only on their average scores.\n\nThe output table presents the movie ID, the movie title, the average rating, and the number of ratings for each of the top ten movies.  \nThis table gives a quick overview of the most popular and well-received movies in the MovieLens dataset.","user":"anonymous","dateUpdated":"2025-06-13T14:15:30+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>In this step, aiming to find the top ten movies with the highest average ratings.\n<br  />I use SQL to aggregate the movie ratings data. First, join the <code>ratings</code> and <code>items</code> tables. The <code>ratings</code> table contains user ratings for each movie. The <code>items</code> table provides the movie titles and other metadata.</p>\n<p>I group the data by <code>movie_id</code> and <code>movie_title</code>. For each group, calculating the average rating and the total number of ratings.\n<br  />The average rating shows how much users enjoyed a particular movie. The rating count tells me how many users contributed to this score.</p>\n<p>After grouping and aggregation, sort the movies in descending order by their average rating. Using the <code>LIMIT 10</code> clause to select only the top ten movies.\n<br  />This approach highlights the highest-rated movies in the dataset.</p>\n<p>It is important to note that I can add an extra filter on the rating count. For example, I might only consider movies that have received at least 50 ratings.\n<br  />This filter helps to avoid bias from movies with very few but very high ratings. For now, Display the top ten movies based only on their average scores.</p>\n<p>The output table presents the movie ID, the movie title, the average rating, and the number of ratings for each of the top ten movies.\n<br  />This table gives a quick overview of the most popular and well-received movies in the MovieLens dataset.</p>\n"}]},"apps":[],"jobName":"paragraph_1749803200174_-1020066821","id":"20250613-082640_2095750754","dateCreated":"2025-06-13T08:26:40+0000","dateStarted":"2025-06-13T14:15:30+0000","dateFinished":"2025-06-13T14:15:30+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61262"},{"text":"%md\n## iii) Find the users who have rated at least 50 movies and identify their favourite movie genres","user":"anonymous","dateUpdated":"2025-06-13T08:30:48+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>iii) Find the users who have rated at least 50 movies and identify their favourite movie genres</h2>\n"}]},"apps":[],"jobName":"paragraph_1749803368954_-1790305115","id":"20250613-082928_886830345","dateCreated":"2025-06-13T08:29:28+0000","dateStarted":"2025-06-13T08:30:48+0000","dateFinished":"2025-06-13T08:30:48+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61263"},{"text":"%md\n### Find users with ≥50 ratings","user":"anonymous","dateUpdated":"2025-06-13T08:32:34+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Find users with ≥50 ratings</h3>\n"}]},"apps":[],"jobName":"paragraph_1749803456506_925960823","id":"20250613-083056_566727652","dateCreated":"2025-06-13T08:30:56+0000","dateStarted":"2025-06-13T08:32:34+0000","dateFinished":"2025-06-13T08:32:34+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61264"},{"text":"%pyspark\nactive_users_df = spark.sql(\"\"\"\n    SELECT\n        user_id,\n        COUNT(*) AS num_rated_movies\n    FROM ratings\n    GROUP BY user_id\n    HAVING num_rated_movies >= 50\n\"\"\")\nactive_users_df.createOrReplaceTempView(\"active_users\")\nactive_users_df.show(10)","user":"anonymous","dateUpdated":"2025-06-13T08:33:00+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+----------------+\n|user_id|num_rated_movies|\n+-------+----------------+\n|    148|              65|\n|    463|             133|\n|    496|             129|\n|    833|             267|\n|    243|              81|\n|    392|             111|\n|    540|              63|\n|    897|             185|\n|    251|              77|\n|     85|             288|\n+-------+----------------+\nonly showing top 10 rows\n\n"}]},"apps":[],"jobName":"paragraph_1749713028723_-1517125116","id":"20250612-072348_2002490208","dateCreated":"2025-06-12T07:23:48+0000","dateStarted":"2025-06-13T08:33:00+0000","dateFinished":"2025-06-13T08:33:00+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61265"},{"text":"%md\n### The number of movie ratings per genre by each active user","user":"anonymous","dateUpdated":"2025-06-13T08:41:54+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>The number of movie ratings per genre by each active user</h3>\n"}]},"apps":[],"jobName":"paragraph_1749803587181_-340431697","id":"20250613-083307_411956839","dateCreated":"2025-06-13T08:33:07+0000","dateStarted":"2025-06-13T08:41:54+0000","dateFinished":"2025-06-13T08:41:54+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61266"},{"text":"%pyspark\r\nuser_genre_count_df = spark.sql(\"\"\"\r\n    SELECT\r\n        r.user_id,\r\n        SUM(i.`unknown`) AS `unknown`,\r\n        SUM(i.`Action`) AS `Action`,\r\n        SUM(i.`Adventure`) AS `Adventure`,\r\n        SUM(i.`Animation`) AS `Animation`,\r\n        SUM(i.`Children`) AS `Children`,\r\n        SUM(i.`Comedy`) AS `Comedy`,\r\n        SUM(i.`Crime`) AS `Crime`,\r\n        SUM(i.`Documentary`) AS `Documentary`,\r\n        SUM(i.`Drama`) AS `Drama`,\r\n        SUM(i.`Fantasy`) AS `Fantasy`,\r\n        SUM(i.`Film-Noir`) AS `Film-Noir`,\r\n        SUM(i.`Horror`) AS `Horror`,\r\n        SUM(i.`Musical`) AS `Musical`,\r\n        SUM(i.`Mystery`) AS `Mystery`,\r\n        SUM(i.`Romance`) AS `Romance`,\r\n        SUM(i.`Sci-Fi`) AS `Sci-Fi`,\r\n        SUM(i.`Thriller`) AS `Thriller`,\r\n        SUM(i.`War`) AS `War`,\r\n        SUM(i.`Western`) AS `Western`\r\n    FROM ratings r\r\n    JOIN items i ON r.movie_id = i.movie_id\r\n    JOIN active_users u ON r.user_id = u.user_id\r\n    GROUP BY r.user_id\r\n\"\"\")\r\n\r\nuser_genre_count_df.createOrReplaceTempView(\"user_genre_count\")\r\nuser_genre_count_df.show(10)","user":"anonymous","dateUpdated":"2025-06-13T09:55:44+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+-------+------+---------+---------+--------+------+-----+-----------+-----+-------+---------+------+-------+-------+-------+------+--------+---+-------+\n|user_id|unknown|Action|Adventure|Animation|Children|Comedy|Crime|Documentary|Drama|Fantasy|Film-Noir|Horror|Musical|Mystery|Romance|Sci-Fi|Thriller|War|Western|\n+-------+-------+------+---------+---------+--------+------+-----+-----------+-----+-------+---------+------+-------+-------+-------+------+--------+---+-------+\n|    148|      0|    12|       15|       14|      15|    20|    3|          0|   25|      0|        1|     2|     11|      2|      9|    13|       5| 10|      1|\n|    463|      0|    21|       15|        5|      17|    50|    8|          1|   59|      2|        1|     2|      7|      3|     35|     9|      17|  9|      0|\n|    496|      0|    32|       24|        8|      21|    28|    6|          0|   52|      2|        2|     9|     15|      7|     22|    25|      30| 12|      2|\n|    833|      1|    72|       30|        3|       2|    65|   35|          3|   97|      2|        9|    31|      5|     10|     26|    47|      72| 22|      6|\n|    243|      0|     6|        4|        1|       6|    27|    3|          1|   59|      1|        0|     1|      0|      1|     26|     2|       4|  8|      1|\n|    392|      0|    20|       12|        5|       4|    28|   11|          3|   57|      0|        3|     2|      6|      9|     22|    11|      19| 11|      2|\n|    540|      0|    19|        8|        5|       4|    16|    6|          0|   28|      1|        0|     1|      2|      2|     11|    12|      16|  7|      0|\n|    897|      0|    57|       35|       11|      26|    56|   12|          0|   55|      5|        3|    14|     15|      6|     32|    28|      40| 20|     10|\n|    251|      0|    31|       17|        3|       5|    20|    5|          1|   23|      1|        0|     3|      3|      2|     16|    14|      26|  7|      0|\n|     85|      0|    46|       32|       10|      23|    87|   11|          2|  152|      2|        5|     4|     24|     14|     52|    26|      29| 33|      8|\n+-------+-------+------+---------+---------+--------+------+-----+-----------+-----+-------+---------+------+-------+-------+-------+------+--------+---+-------+\nonly showing top 10 rows\n\n"}]},"apps":[],"jobName":"paragraph_1749803587043_9689802","id":"20250613-083307_1579318554","dateCreated":"2025-06-13T08:33:07+0000","dateStarted":"2025-06-13T09:55:44+0000","dateFinished":"2025-06-13T09:55:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61267"},{"text":"%md\n### Find out each user's favorite movie genre","user":"anonymous","dateUpdated":"2025-06-13T08:42:33+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Find out each user's favorite movie genre</h3>\n"}]},"apps":[],"jobName":"paragraph_1749804138585_1868772417","id":"20250613-084218_47370255","dateCreated":"2025-06-13T08:42:18+0000","dateStarted":"2025-06-13T08:42:33+0000","dateFinished":"2025-06-13T08:42:33+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61268"},{"text":"%pyspark\nfrom pyspark.sql.types import StringType, IntegerType\nfrom pyspark.sql.functions import udf","user":"anonymous","dateUpdated":"2025-06-13T09:55:18+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1749804136988_-1378923697","id":"20250613-084216_2030438176","dateCreated":"2025-06-13T08:42:16+0000","dateStarted":"2025-06-13T09:55:18+0000","dateFinished":"2025-06-13T09:55:18+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61269"},{"text":"%pyspark\ngenres=[\n    \"unknown\", \"Action\", \"Adventure\", \"Animation\", \"Children\", \"Comedy\",\n    \"Crime\", \"Documentary\", \"Drama\", \"Fantasy\", \"Film-Noir\", \"Horror\",\n    \"Musical\", \"Mystery\", \"Romance\", \"Sci-Fi\", \"Thriller\", \"War\", \"Western\"]","user":"anonymous","dateUpdated":"2025-06-13T09:53:45+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1749808403918_-504090663","id":"20250613-095323_1283386113","dateCreated":"2025-06-13T09:53:23+0000","dateStarted":"2025-06-13T09:53:45+0000","dateFinished":"2025-06-13T09:53:45+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61270"},{"text":"%pyspark\ndef fav_genre_and_count(*cols):\n    # cols: 19 types of ratings\n    counts = list(cols)\n    max_count = max(counts)\n    favs = [genres[i] for i, v in enumerate(counts) if v == max_count]\n    return \",\".join(favs)\n\nfav_genre_udf = udf(fav_genre_and_count, StringType())","user":"anonymous","dateUpdated":"2025-06-13T09:54:12+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1749808402416_-1491356340","id":"20250613-095322_324432405","dateCreated":"2025-06-13T09:53:22+0000","dateStarted":"2025-06-13T09:54:12+0000","dateFinished":"2025-06-13T09:54:12+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61271"},{"text":"%pyspark\n# Pass the 19 fields into the udf one by one\nuser_genre_count_df = user_genre_count_df.withColumn(\n    \"fav_genre\",\n    fav_genre_udf(*[user_genre_count_df[g] for g in genres]))","user":"anonymous","dateUpdated":"2025-06-13T09:54:27+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1749808431442_-1447064244","id":"20250613-095351_2126178325","dateCreated":"2025-06-13T09:53:51+0000","dateStarted":"2025-06-13T09:54:27+0000","dateFinished":"2025-06-13T09:54:27+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61272"},{"text":"%pyspark\n# output max_count\ndef max_count_only(*cols):\n    return int(max(list(cols)))\nmax_count_udf = udf(max_count_only, IntegerType())\nuser_genre_count_df = user_genre_count_df.withColumn(\n    \"max_count\",\n    max_count_udf(*[user_genre_count_df[g] for g in genres]))","user":"anonymous","dateUpdated":"2025-06-13T09:54:48+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1749808430799_-877651196","id":"20250613-095350_1617619455","dateCreated":"2025-06-13T09:53:50+0000","dateStarted":"2025-06-13T09:54:48+0000","dateFinished":"2025-06-13T09:54:48+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61273"},{"text":"%pyspark\n# Display results\nuser_genre_count_df.select(\"user_id\", \"fav_genre\", \"max_count\").show(10, truncate=False)","user":"anonymous","dateUpdated":"2025-06-13T09:55:05+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+---------+---------+\n|user_id|fav_genre|max_count|\n+-------+---------+---------+\n|148    |Drama    |25       |\n|463    |Drama    |59       |\n|496    |Drama    |52       |\n|833    |Drama    |97       |\n|243    |Drama    |59       |\n|392    |Drama    |57       |\n|540    |Drama    |28       |\n|897    |Action   |57       |\n|251    |Action   |31       |\n|85     |Drama    |152      |\n+-------+---------+---------+\nonly showing top 10 rows\n\n"}]},"apps":[],"jobName":"paragraph_1749808430080_-701051451","id":"20250613-095350_1125476091","dateCreated":"2025-06-13T09:53:50+0000","dateStarted":"2025-06-13T09:55:05+0000","dateFinished":"2025-06-13T09:55:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61274"},{"text":"%md\r\nIn this step, I want to find the users who have rated at least 50 movies.  \r\nFirst, count the total number of movies each user has rated. If a user has rated 50 or more movies, consider this user as active.\r\n\r\nNext, analyze the movie preferences of each active user. Join the ratings data with the movie genres information. For each user, count how many times they have rated movies in each genre. Each genre represents a specific type of movie, such as Action, Comedy, or Drama.\r\n\r\nAfter finishing counting, compare the results for all genres. Identifying the favourite genre for each user as the one with the highest rating count. If a user has more than one genre with the same highest count, list all these genres as their favourites.\r\n\r\nThis approach helps me understand what types of movies each active user prefers most.  \r\nBy focusing on users with many ratings, I can provide a more accurate analysis of their personal movie taste.\r\n","user":"anonymous","dateUpdated":"2025-06-13T14:16:54+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>In this step, I want to find the users who have rated at least 50 movies.\n<br  />First, count the total number of movies each user has rated. If a user has rated 50 or more movies, consider this user as active.</p>\n<p>Next, analyze the movie preferences of each active user. Join the ratings data with the movie genres information. For each user, count how many times they have rated movies in each genre. Each genre represents a specific type of movie, such as Action, Comedy, or Drama.</p>\n<p>After finishing counting, compare the results for all genres. Identifying the favourite genre for each user as the one with the highest rating count. If a user has more than one genre with the same highest count, list all these genres as their favourites.</p>\n<p>This approach helps me understand what types of movies each active user prefers most.\n<br  />By focusing on users with many ratings, I can provide a more accurate analysis of their personal movie taste.</p>\n"}]},"apps":[],"jobName":"paragraph_1749804487769_-1588305364","id":"20250613-084807_1925885735","dateCreated":"2025-06-13T08:48:07+0000","dateStarted":"2025-06-13T14:16:54+0000","dateFinished":"2025-06-13T14:16:54+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61275"},{"text":"%md\n## iv) Find all the users who are less than 20 years old","user":"anonymous","dateUpdated":"2025-06-13T08:54:53+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>iv) Find all the users who are less than 20 years old</h2>\n"}]},"apps":[],"jobName":"paragraph_1749804880872_-151853830","id":"20250613-085440_1282254917","dateCreated":"2025-06-13T08:54:40+0000","dateStarted":"2025-06-13T08:54:53+0000","dateFinished":"2025-06-13T08:54:53+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61276"},{"text":"%md\n### Use SQL to query all users under 20 years old","user":"anonymous","dateUpdated":"2025-06-13T08:55:23+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Use SQL to query all users under 20 years old</h3>\n"}]},"apps":[],"jobName":"paragraph_1749804904663_-898620797","id":"20250613-085504_1421297462","dateCreated":"2025-06-13T08:55:04+0000","dateStarted":"2025-06-13T08:55:23+0000","dateFinished":"2025-06-13T08:55:23+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61277"},{"text":"%pyspark\nusers_under_20_df = spark.sql(\"\"\"\n    SELECT *\n    FROM users\n    WHERE age < 20\n\"\"\")\nusers_under_20_df.show(10, truncate=False)","user":"anonymous","dateUpdated":"2025-06-13T08:55:34+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+---+------+-------------+--------+\n|user_id|age|gender|occupation   |zip_code|\n+-------+---+------+-------------+--------+\n|30     |7  |M     |student      |55436   |\n|36     |19 |F     |student      |93117   |\n|52     |18 |F     |student      |55105   |\n|57     |16 |M     |none         |84010   |\n|67     |17 |M     |student      |60402   |\n|68     |19 |M     |student      |22904   |\n|101    |15 |M     |student      |05146   |\n|110    |19 |M     |student      |77840   |\n|142    |13 |M     |other        |48118   |\n|179    |15 |M     |entertainment|20755   |\n+-------+---+------+-------------+--------+\nonly showing top 10 rows\n\n"}]},"apps":[],"jobName":"paragraph_1749804487410_-1350145795","id":"20250613-084807_1548087083","dateCreated":"2025-06-13T08:48:07+0000","dateStarted":"2025-06-13T08:55:34+0000","dateFinished":"2025-06-13T08:55:34+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61278"},{"text":"%md\n### Statistics on gender and occupation distribution of users under 20 years old","user":"anonymous","dateUpdated":"2025-06-13T09:02:05+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Statistics on gender and occupation distribution of users under 20 years old</h3>\n"}]},"apps":[],"jobName":"paragraph_1749804487185_-1363612006","id":"20250613-084807_1518406468","dateCreated":"2025-06-13T08:48:07+0000","dateStarted":"2025-06-13T09:02:05+0000","dateFinished":"2025-06-13T09:02:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61279"},{"text":"%pyspark\nspark.sql(\"\"\"\n    SELECT gender, occupation, COUNT(*) AS cnt\n    FROM users\n    WHERE age < 20\n    GROUP BY gender, occupation\n    ORDER BY cnt DESC\n\"\"\").show(truncate=False)","user":"anonymous","dateUpdated":"2025-06-13T09:01:52+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------+-------------+---+\n|gender|occupation   |cnt|\n+------+-------------+---+\n|M     |student      |37 |\n|F     |student      |27 |\n|M     |none         |3  |\n|M     |other        |3  |\n|M     |entertainment|2  |\n|F     |writer       |2  |\n|F     |artist       |1  |\n|F     |salesman     |1  |\n|F     |other        |1  |\n+------+-------------+---+\n\n"}]},"apps":[],"jobName":"paragraph_1749805211315_-1731233862","id":"20250613-090011_80113021","dateCreated":"2025-06-13T09:00:11+0000","dateStarted":"2025-06-13T09:00:18+0000","dateFinished":"2025-06-13T09:00:19+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61280"},{"text":"%md\nIn this step, I want to identify all users who are younger than 20 years old.  \nUsing a simple SQL query to filter the users table. Select only those users whose age is less than 20.\n\nBy doing this, I quickly get a list of teenage users in the dataset.  \nWe can use this information to study the behavior or preferences of younger users. I also explore their gender and occupation distributions.\n\nThis step helps me understand the composition of the user base in terms of age.  \nIt also allows me to perform further analysis focused on the youngest users in the MovieLens dataset.","user":"anonymous","dateUpdated":"2025-06-13T14:18:14+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>In this step, I want to identify all users who are younger than 20 years old.\n<br  />Using a simple SQL query to filter the users table. Select only those users whose age is less than 20.</p>\n<p>By doing this, I quickly get a list of teenage users in the dataset.\n<br  />We can use this information to study the behavior or preferences of younger users. I also explore their gender and occupation distributions.</p>\n<p>This step helps me understand the composition of the user base in terms of age.\n<br  />It also allows me to perform further analysis focused on the youngest users in the MovieLens dataset.</p>\n"}]},"apps":[],"jobName":"paragraph_1749805094385_1002670874","id":"20250613-085814_1955861266","dateCreated":"2025-06-13T08:58:14+0000","dateStarted":"2025-06-13T14:18:14+0000","dateFinished":"2025-06-13T14:18:14+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61281"},{"text":"%md\n## v) Find all the users whose occupation is “scientist” and whose age is between 30 and 40 years old.","user":"anonymous","dateUpdated":"2025-06-13T08:59:56+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>v) Find all the users whose occupation is “scientist” and whose age is between 30 and 40 years old.</h2>\n"}]},"apps":[],"jobName":"paragraph_1749805166302_516271643","id":"20250613-085926_1600760694","dateCreated":"2025-06-13T08:59:26+0000","dateStarted":"2025-06-13T08:59:56+0000","dateFinished":"2025-06-13T08:59:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61282"},{"text":"%md\n### Use SQL to filter","user":"anonymous","dateUpdated":"2025-06-13T09:12:57+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Use SQL to filter</h3>\n"}]},"apps":[],"jobName":"paragraph_1749805828257_328832698","id":"20250613-091028_1296579157","dateCreated":"2025-06-13T09:10:28+0000","dateStarted":"2025-06-13T09:12:57+0000","dateFinished":"2025-06-13T09:12:57+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61283"},{"text":"%pyspark\nscientists_30_40_df = spark.sql(\"\"\"\n    SELECT *\n    FROM users\n    WHERE occupation = 'scientist' AND age BETWEEN 30 AND 40\n\"\"\")\nscientists_30_40_df.show(10, truncate=False)","user":"anonymous","dateUpdated":"2025-06-13T09:10:44+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+---+------+----------+--------+\n|user_id|age|gender|occupation|zip_code|\n+-------+---+------+----------+--------+\n|40     |38 |M     |scientist |27514   |\n|71     |39 |M     |scientist |98034   |\n|74     |39 |M     |scientist |T8H1N   |\n|107    |39 |M     |scientist |60466   |\n|183    |33 |M     |scientist |27708   |\n|272    |33 |M     |scientist |53706   |\n|309    |40 |M     |scientist |70802   |\n|337    |37 |M     |scientist |10522   |\n|430    |38 |M     |scientist |98199   |\n|538    |31 |M     |scientist |21010   |\n+-------+---+------+----------+--------+\nonly showing top 10 rows\n\n"}]},"apps":[],"jobName":"paragraph_1749805093502_1048455993","id":"20250613-085813_1845223215","dateCreated":"2025-06-13T08:58:13+0000","dateStarted":"2025-06-13T09:10:44+0000","dateFinished":"2025-06-13T09:10:45+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61284"},{"text":"%md\n### Count","user":"anonymous","dateUpdated":"2025-06-13T09:13:56+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Count</h3>\n"}]},"apps":[],"jobName":"paragraph_1749805969584_723949038","id":"20250613-091249_282510396","dateCreated":"2025-06-13T09:12:49+0000","dateStarted":"2025-06-13T09:13:56+0000","dateFinished":"2025-06-13T09:13:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61285"},{"text":"%pyspark\ncount = scientists_30_40_df.count()\nprint(\"Number of scientists aged 30 to 40: \" + str(count))","user":"anonymous","dateUpdated":"2025-06-13T09:12:43+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Number of scientists aged 30 to 40: 16\n"}]},"apps":[],"jobName":"paragraph_1749804485606_-2047310802","id":"20250613-084805_1489898422","dateCreated":"2025-06-13T08:48:05+0000","dateStarted":"2025-06-13T09:12:43+0000","dateFinished":"2025-06-13T09:12:43+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61286"},{"text":"%md\nIn this step, I look for users whose occupation is \"scientist\" and whose age is between 30 and 40 years old，final statistics \nUsing a SQL query to filter the users table. Select only those users who match both conditions.\n\nThis method allows me to focus on a very specific group of users in the dataset.  \nBy identifying scientists within this age range, I can analyze their movie preferences or compare them with other groups.","user":"anonymous","dateUpdated":"2025-06-13T14:18:52+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>In this step, I look for users whose occupation is &ldquo;scientist&rdquo; and whose age is between 30 and 40 years old，final statistics\n<br  />Using a SQL query to filter the users table. Select only those users who match both conditions.</p>\n<p>This method allows me to focus on a very specific group of users in the dataset.\n<br  />By identifying scientists within this age range, I can analyze their movie preferences or compare them with other groups.</p>\n"}]},"apps":[],"jobName":"paragraph_1749805921374_-756605245","id":"20250613-091201_1306248386","dateCreated":"2025-06-13T09:12:01+0000","dateStarted":"2025-06-13T14:18:52+0000","dateFinished":"2025-06-13T14:18:52+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61287"},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2025-06-12T07:05:26+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1749711926939_1615413122","id":"20250612-070526_92965248","dateCreated":"2025-06-12T07:05:26+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:61288"}],"name":"MovieLens_Spark_Analysis","id":"2KVRGDGAZ","angularObjects":{"2CHS8UYQQ:shared_process":[],"2C8A4SZ9T_livy2:shared_process":[],"2CK8A9MEG:shared_process":[],"2C4U48MY3_spark2:shared_process":[],"2CKAY1A8Y:shared_process":[],"2CKEKWY8Z:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}